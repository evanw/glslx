namespace GLSLX {
  enum NodeKind {
    # Other
    GLOBAL
    STRUCT_BLOCK
    VARIABLE

    # Statements
    BLOCK
    BREAK
    CONTINUE
    DISCARD
    DO_WHILE
    EXPRESSION
    EXTENSION
    FOR
    FUNCTION
    IF
    MODIFIER_BLOCK
    PRECISION
    RETURN
    STRUCT
    VARIABLES
    VERSION
    WHILE

    # Expressions
    CALL
    DOT
    HOOK
    NAME
    PARSE_ERROR
    SEQUENCE
    TYPE
    UNKNOWN_CONSTANT

    # Literals
    BOOL
    FLOAT
    INT

    # Unary prefix
    NEGATIVE
    NOT
    POSITIVE

    # Unary prefix assign
    PREFIX_DECREMENT
    PREFIX_INCREMENT

    # Unary postfix assign
    POSTFIX_DECREMENT
    POSTFIX_INCREMENT

    # Binary
    ADD
    DIVIDE
    EQUAL
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    INDEX
    LESS_THAN
    LESS_THAN_OR_EQUAL
    LOGICAL_AND
    LOGICAL_OR
    LOGICAL_XOR
    MULTIPLY
    NOT_EQUAL
    SUBTRACT

    # Binary assignment
    ASSIGN
    ASSIGN_ADD
    ASSIGN_DIVIDE
    ASSIGN_MULTIPLY
    ASSIGN_SUBTRACT

    def isStatement bool {
      return self as int >= BLOCK && self as int <= WHILE
    }

    def isExpression bool {
      return self as int >= CALL && self as int <= ASSIGN_SUBTRACT
    }

    def isLiteral bool {
      return self as int >= BOOL && self as int <= INT
    }

    def isUnary bool {
      return self as int >= NEGATIVE && self as int <= POSTFIX_INCREMENT
    }

    def isUnaryPrefix bool {
      return self as int >= NEGATIVE && self as int <= PREFIX_INCREMENT
    }

    def isUnaryPostfix bool {
      return self as int >= POSTFIX_DECREMENT && self as int <= POSTFIX_INCREMENT
    }

    def isUnaryAssign bool {
      return self as int >= PREFIX_DECREMENT && self as int <= POSTFIX_INCREMENT
    }

    def isBinary bool {
      return self as int >= ADD && self as int <= ASSIGN_SUBTRACT
    }

    def isBinaryAssign bool {
      return self as int >= ASSIGN && self as int <= ASSIGN_SUBTRACT
    }

    def isJump bool {
      return self == BREAK || self == CONTINUE || self == DISCARD || self == RETURN
    }

    def isLoop bool {
      return self == DO_WHILE || self == FOR || self == WHILE
    }
  }

  class Node {
    const id = _createID
    var kind NodeKind
    var range Range = null
    var internalRange Range = null
    var symbol Symbol = null
    var resolvedType Type = null
    var _literal = 0.0
    var _text string = null
    var _parent Node = null
    var _firstChild Node = null
    var _lastChild Node = null
    var _previousSibling Node = null
    var _nextSibling Node = null
    var hasControlFlowAtEnd = false

    def _copyMembersFrom(node Node) {
      kind = node.kind
      range = node.range
      internalRange = node.internalRange
      symbol = node.symbol
      resolvedType = node.resolvedType
      _literal = node._literal
      _text = node._text
    }

    def cloneWithoutChildren Node {
      var clone = new(kind)
      clone._copyMembersFrom(self)
      return clone
    }

    # When used with become(), this provides a convenient way to wrap a node in
    # an operation without the caller needing to be aware of replaceWith():
    #
    #  node.become(Node.createUnary(.NOT, node.cloneAndStealChildren))
    #
    def cloneAndStealChildren Node {
      var clone = cloneWithoutChildren
      while hasChildren {
        clone.appendChild(_firstChild.remove)
      }
      return clone
    }

    def clone Node {
      var clone = cloneWithoutChildren
      for child = _firstChild; child != null; child = child._nextSibling {
        clone.appendChild(child.clone)
      }
      return clone
    }

    # Change self node in place to become the provided node. The parent node is
    # not changed, so become() can be called within a nested method and does not
    # need to report the updated node reference to the caller since the reference
    # does not change.
    def become(node Node) {
      if node == self {
        return
      }
      assert(node._parent == null)
      _copyMembersFrom(node)
      removeChildren
      appendChildrenFrom(node)
    }

    def parent Node {
      return _parent
    }

    def firstChild Node {
      return _firstChild
    }

    def lastChild Node {
      return _lastChild
    }

    def previousSibling Node {
      return _previousSibling
    }

    def nextSibling Node {
      return _nextSibling
    }

    # This is cheaper than childCount == 0
    def hasChildren bool {
      return _firstChild != null
    }

    # This is cheaper than childCount == 1
    def hasOneChild bool {
      return hasChildren && _firstChild == _lastChild
    }

    def childCount int {
      var count = 0
      for child = _firstChild; child != null; child = child._nextSibling {
        count++
      }
      return count
    }

    def childAt(index int) Node {
      assert(0 <= index && index < childCount)
      var child = _firstChild
      while index != 0 {
        child = child._nextSibling
        index--
      }
      return child
    }

    def withType(value Type) Node {
      resolvedType = value
      return self
    }

    def withSymbol(value Symbol) Node {
      symbol = value
      return self
    }

    def withBool(value bool) Node {
      _literal = value as double
      return self
    }

    def withInt(value int) Node {
      _literal = value
      return self
    }

    def withFloat(value double) Node {
      _literal = value
      return self
    }

    def withText(value string) Node {
      _text = value
      return self
    }

    def withRange(value Range) Node {
      range = value
      return self
    }

    def withInternalRange(value Range) Node {
      internalRange = value
      return self
    }

    def appendChild(node Node) Node {
      if node == null {
        return self
      }

      assert(node != self)
      assert(node._parent == null)
      assert(node._previousSibling == null)
      assert(node._nextSibling == null)
      node._parent = self

      if hasChildren {
        node._previousSibling = _lastChild
        _lastChild._nextSibling = node
        _lastChild = node
      } else {
        _lastChild = _firstChild = node
      }

      return self
    }

    def appendChildrenFrom(node Node) Node {
      assert(node != self)
      while node.hasChildren {
        appendChild(node._firstChild.remove)
      }
      return self
    }

    def remove Node {
      assert(_parent != null)

      if _previousSibling != null {
        assert(_previousSibling._nextSibling == self)
        _previousSibling._nextSibling = _nextSibling
      } else {
        assert(_parent._firstChild == self)
        _parent._firstChild = _nextSibling
      }

      if _nextSibling != null {
        assert(_nextSibling._previousSibling == self)
        _nextSibling._previousSibling = _previousSibling
      } else {
        assert(_parent._lastChild == self)
        _parent._lastChild = _previousSibling
      }

      _parent = null
      _previousSibling = null
      _nextSibling = null
      return self
    }

    def removeChildren {
      while hasChildren {
        _firstChild.remove
      }
    }

    def replaceWith(node Node) Node {
      assert(node != self)
      assert(_parent != null)
      assert(node._parent == null)
      assert(node._previousSibling == null)
      assert(node._nextSibling == null)

      node._parent = _parent
      node._previousSibling = _previousSibling
      node._nextSibling = _nextSibling

      if _previousSibling != null {
        assert(_previousSibling._nextSibling == self)
        _previousSibling._nextSibling = node
      } else {
        assert(_parent._firstChild == self)
        _parent._firstChild = node
      }

      if _nextSibling != null {
        assert(_nextSibling._previousSibling == self)
        _nextSibling._previousSibling = node
      } else {
        assert(_parent._lastChild == self)
        _parent._lastChild = node
      }

      _parent = null
      _previousSibling = null
      _nextSibling = null
      return self
    }

    def insertChildBefore(after Node, before Node) Node {
      if before == null {
        return self
      }

      assert(before != after)
      assert(before._parent == null)
      assert(before._previousSibling == null)
      assert(before._nextSibling == null)
      assert(after == null || after._parent == self)

      if after == null {
        return appendChild(before)
      }

      before._parent = self
      before._previousSibling = after._previousSibling
      before._nextSibling = after

      if after._previousSibling != null {
        assert(after == after._previousSibling._nextSibling)
        after._previousSibling._nextSibling = before
      } else {
        assert(after == _firstChild)
        _firstChild = before
      }

      after._previousSibling = before
      return self
    }

    def replaceWithChildren {
      while hasChildren {
        parent.insertChildBefore(nextSibling, lastChild.remove)
      }
      remove
    }
  }

  class Node {
    def isTrue bool {
      return kind == .BOOL && asBool
    }

    def isFalse bool {
      return kind == .BOOL && !asBool
    }

    def isIntOrFloat(value int) bool {
      return kind == .INT && asInt == value || kind == .FLOAT && asFloat == value
    }

    def isCallTarget bool {
      return parent != null && parent.kind == .CALL && parent.callTarget == self
    }

    def isAssignTarget bool {
      if parent != null {
        # Check whether this node is the target of a mutating operator
        if parent.kind.isUnaryAssign || parent.kind.isBinaryAssign && parent.binaryLeft == self {
          return true
        }

        # Check whether this node is an "inout" argument in a function call.
        # But only do this if the function call was resolved correctly.
        if parent.kind == .CALL && parent.resolvedType != .ERROR {
          var callTarget = parent.callTarget
          var symbol = callTarget.symbol
          if symbol != null && symbol.isFunction {
            var function = symbol.asFunction
            var i = 0
            for child = callTarget.nextSibling; child != null; child = child.nextSibling {
              if child == self {
                return .INOUT in function.arguments[i].flags
              }
              i++
            }
          }
        }
      }

      return false
    }

    def isUsedInStorage bool {
      if isAssignTarget {
        return true
      }
      if parent != null && (parent.kind == .DOT || parent.kind == .INDEX) {
        return parent.isUsedInStorage
      }
      return false
    }

    def isEmptyBlock bool {
      return kind == .BLOCK && !hasChildren
    }

    def isEmptySequence bool {
      return kind == .SEQUENCE && !hasChildren
    }

    def isNumberLessThanZero bool {
      return kind == .INT && asInt < 0 || kind == .FLOAT && asFloat < 0
    }

    def hasNoSideEffects bool {
      assert(kind.isExpression)
      switch kind {
        case .BOOL, .FLOAT, .INT, .NAME { return true }
        case .HOOK { return hookTest.hasNoSideEffects && hookTrue.hasNoSideEffects && hookFalse.hasNoSideEffects }
        case .DOT { return dotTarget.hasNoSideEffects }
        default {
          if kind.isUnary { return !kind.isUnaryAssign && unaryValue.hasNoSideEffects }
          if kind.isBinary { return !kind.isBinaryAssign && binaryLeft.hasNoSideEffects && binaryRight.hasNoSideEffects }
          return false
        }
      }
    }

    def invertBooleanCondition {
      assert(kind.isExpression)

      switch kind {
        case .BOOL { withBool(!asBool) }
        case .NOT { become(unaryValue.remove) }
        case .EQUAL { kind = .NOT_EQUAL }
        case .NOT_EQUAL { kind = .EQUAL }
        case .LESS_THAN { kind = .GREATER_THAN_OR_EQUAL }
        case .GREATER_THAN { kind = .LESS_THAN_OR_EQUAL }
        case .LESS_THAN_OR_EQUAL { kind = .GREATER_THAN }
        case .GREATER_THAN_OR_EQUAL { kind = .LESS_THAN }
        case .SEQUENCE { lastChild.invertBooleanCondition }

        case .LOGICAL_OR {
          kind = .LOGICAL_AND
          binaryLeft.invertBooleanCondition
          binaryRight.invertBooleanCondition
        }

        case .LOGICAL_AND {
          kind = .LOGICAL_OR
          binaryLeft.invertBooleanCondition
          binaryRight.invertBooleanCondition
        }

        default {
          become(createUnary(.NOT, cloneAndStealChildren).withType(.BOOL))
        }
      }
    }

    def looksTheSameAs(node Node) bool {
      if kind == node.kind {
        switch kind {
          case .BOOL { return asBool == node.asBool }
          case .FLOAT { return asFloat == node.asFloat }
          case .INT { return asInt == node.asInt }
          case .NAME { return symbol == node.symbol }
          case .TYPE { return resolvedType == node.resolvedType }
          case .DOT { return dotTarget.looksTheSameAs(node.dotTarget) && symbol == node.symbol && asString == node.asString }
          case .HOOK { return hookTest.looksTheSameAs(node.hookTest) && hookTrue.looksTheSameAs(node.hookTrue) && hookFalse.looksTheSameAs(node.hookFalse) }
          case .CALL {
            var left = firstChild
            var right = node.firstChild
            while left != null && right != null {
              if !left.looksTheSameAs(right) {
                return false
              }
              left = left.nextSibling
              right = right.nextSibling
            }
            return left == null && right == null
          }
          default {
            if kind.isUnary { return unaryValue.looksTheSameAs(node.unaryValue) }
            if kind.isBinary { return binaryLeft.looksTheSameAs(node.binaryLeft) && binaryRight.looksTheSameAs(node.binaryRight) }
          }
        }
      }

      return false
    }
  }

  namespace Node {
    def createGlobal Node {
      return new(.GLOBAL)
    }

    def createStructBlock Node {
      return new(.STRUCT_BLOCK)
    }

    def createVariable(symbol VariableSymbol, value Node) Node {
      return new(.VARIABLE).withSymbol(symbol).appendChild(value)
    }

    def createBlock Node {
      return new(.BLOCK)
    }

    def createBreak Node {
      return new(.BREAK)
    }

    def createContinue Node {
      return new(.CONTINUE)
    }

    def createDiscard Node {
      return new(.DISCARD)
    }

    def createDoWhile(body Node, test Node) Node {
      assert(body.kind.isStatement)
      assert(test.kind.isExpression)
      return new(.DO_WHILE).appendChild(body).appendChild(test)
    }

    def createExpression(value Node) Node {
      assert(value.kind.isExpression)
      return new(.EXPRESSION).appendChild(value)
    }

    def createExtension(name string, behavior ExtensionBehavior) Node {
      return new(.EXTENSION).withText(name).withInt(behavior)
    }

    def createFor(setup Node, test Node, update Node, body Node) Node {
      assert(setup == null || setup.kind.isExpression || setup.kind == .VARIABLES)
      assert(test == null || test.kind.isExpression)
      assert(update == null || update.kind.isExpression)
      assert(body.kind.isStatement)
      return new(.FOR)
        .appendChild(setup == null ? createSequence : setup)
        .appendChild(test == null ? createSequence : test)
        .appendChild(update == null ? createSequence : update)
        .appendChild(body)
    }

    def createFunction(symbol FunctionSymbol) Node {
      return new(.FUNCTION).withSymbol(symbol)
    }

    def createIf(test Node, yes Node, no Node) Node {
      assert(test.kind.isExpression)
      assert(yes.kind.isStatement)
      assert(no == null || no.kind.isStatement)
      return new(.IF).appendChild(test).appendChild(yes).appendChild(no)
    }

    def createModifierBlock Node {
      return new(.MODIFIER_BLOCK)
    }

    def createPrecision(flags int, type Node) Node {
      assert(type.kind.isExpression)
      return new(.PRECISION).withInt(flags).appendChild(type)
    }

    def createReturn(value Node) Node {
      assert(value == null || value.kind.isExpression)
      return new(.RETURN).appendChild(value)
    }

    def createStruct(symbol StructSymbol, block Node, variables Node) Node {
      assert(block.kind == .STRUCT_BLOCK)
      assert(variables == null || variables.kind == .VARIABLES)
      return new(.STRUCT).withSymbol(symbol).appendChild(block).appendChild(variables)
    }

    def createVariables(flags int, type Node) Node {
      assert(type.kind.isExpression)
      return new(.VARIABLES).withInt(flags).appendChild(type)
    }

    def createVersion(version int) Node {
      return new(.VERSION).withInt(version)
    }

    def createWhile(test Node, body Node) Node {
      assert(test.kind.isExpression)
      assert(body.kind.isStatement)
      return new(.WHILE).appendChild(test).appendChild(body)
    }

    def createCall(value Node) Node {
      assert(value.kind.isExpression)
      return new(.CALL).appendChild(value)
    }

    def createConstructorCall(type Type) Node {
      return createCall(createType(type)).withType(type)
    }

    def createDot(value Node, text string) Node {
      assert(value.kind.isExpression)
      assert(text != null)
      return new(.DOT).appendChild(value).withText(text)
    }

    def createHook(test Node, yes Node, no Node) Node {
      assert(test.kind.isExpression)
      assert(yes.kind.isExpression)
      assert(no.kind.isExpression)
      return new(.HOOK).appendChild(test).appendChild(yes).appendChild(no)
    }

    def createName(symbol Symbol) Node {
      return new(.NAME).withSymbol(symbol)
    }

    def createParseError Node {
      return new(.PARSE_ERROR).withType(.ERROR)
    }

    def createSequence Node {
      return new(.SEQUENCE)
    }

    def createType(type Type) Node {
      return new(.TYPE).withType(type)
    }

    def createUnknownConstant(type Type) Node {
      return new(.UNKNOWN_CONSTANT).withType(type)
    }

    def createBool(value bool) Node {
      return new(.BOOL).withBool(value).withType(.BOOL)
    }

    def createInt(value int) Node {
      return new(.INT).withInt(value).withType(.INT)
    }

    def createFloat(value double) Node {
      return new(.FLOAT).withFloat(value).withType(.FLOAT)
    }

    def createUnary(kind NodeKind, value Node) Node {
      assert(kind.isUnary)
      return new(kind).appendChild(value)
    }

    def createBinary(kind NodeKind, left Node, right Node) Node {
      assert(kind.isBinary)
      return new(kind).appendChild(left).appendChild(right)
    }
  }

  class Node {
    def variableInitializer Node {
      assert(kind == .VARIABLE)
      assert(childCount <= 1)
      return _firstChild
    }

    def doWhileBody Node {
      assert(kind == .DO_WHILE)
      assert(childCount == 2)
      assert(_firstChild.kind.isStatement)
      return _firstChild
    }

    def doWhileTest Node {
      assert(kind == .DO_WHILE)
      assert(childCount == 2)
      assert(_lastChild.kind.isExpression)
      return _lastChild
    }

    def expressionValue Node {
      assert(kind == .EXPRESSION)
      assert(childCount == 1)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def extensionName string {
      assert(kind == .EXTENSION)
      assert(childCount == 0)
      assert(_text != null)
      return _text
    }

    def extensionBehavior ExtensionBehavior {
      assert(kind == .EXTENSION)
      assert(childCount == 0)
      return _literal as ExtensionBehavior
    }

    def forSetup Node {
      assert(kind == .FOR)
      assert(childCount == 4)
      assert(_firstChild.kind.isExpression || _firstChild.kind == .VARIABLES)
      return _firstChild.isEmptySequence ? null : _firstChild
    }

    def forTest Node {
      assert(kind == .FOR)
      assert(childCount == 4)
      assert(_firstChild._nextSibling.kind.isExpression || _firstChild._nextSibling.kind == .VARIABLES)
      return _firstChild._nextSibling.isEmptySequence ? null : _firstChild._nextSibling
    }

    def forUpdate Node {
      assert(kind == .FOR)
      assert(childCount == 4)
      assert(_lastChild._previousSibling.kind.isExpression)
      return _lastChild._previousSibling.isEmptySequence ? null : _lastChild._previousSibling
    }

    def forBody Node {
      assert(kind == .FOR)
      assert(childCount == 4)
      assert(_lastChild.kind.isStatement)
      return _lastChild
    }

    def ifTest Node {
      assert(kind == .IF)
      assert(childCount == 2 || childCount == 3)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def ifTrue Node {
      assert(kind == .IF)
      assert(childCount == 2 || childCount == 3)
      assert(_firstChild._nextSibling.kind.isStatement)
      return _firstChild._nextSibling
    }

    def ifFalse Node {
      assert(kind == .IF)
      assert(childCount == 2 || childCount == 3)
      assert(_firstChild._nextSibling._nextSibling == null || _firstChild._nextSibling._nextSibling.kind.isStatement)
      return _firstChild._nextSibling._nextSibling
    }

    def precisionFlag SymbolFlags {
      assert(kind == .PRECISION)
      assert(childCount == 1)
      return _literal as SymbolFlags
    }

    def precisionType Node {
      assert(kind == .PRECISION)
      assert(childCount == 1)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def returnValue Node {
      assert(kind == .RETURN)
      assert(childCount <= 1)
      assert(_firstChild == null || _firstChild.kind.isExpression)
      return _firstChild
    }

    def variablesFlags SymbolFlags {
      assert(kind == .VARIABLES)
      assert(childCount >= 1)
      return _literal as SymbolFlags
    }

    def variablesType Node {
      assert(kind == .VARIABLES)
      assert(childCount >= 1)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def structBlock Node {
      assert(kind == .STRUCT)
      assert(childCount == 1 || childCount == 2)
      assert(_firstChild.kind == .STRUCT_BLOCK)
      return _firstChild
    }

    def structVariables Node {
      assert(kind == .STRUCT)
      assert(childCount == 1 || childCount == 2)
      assert(_firstChild._nextSibling == null || _firstChild._nextSibling.kind == .VARIABLES)
      return _firstChild._nextSibling
    }

    def versionNumber int {
      assert(kind == .VERSION)
      assert(childCount == 0)
      return _literal as int
    }

    def whileTest Node {
      assert(kind == .WHILE)
      assert(childCount == 2)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def whileBody Node {
      assert(kind == .WHILE)
      assert(childCount == 2)
      assert(_lastChild.kind.isStatement)
      return _lastChild
    }

    def callTarget Node {
      assert(kind == .CALL)
      assert(childCount >= 1)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def dotTarget Node {
      assert(kind == .DOT)
      assert(childCount == 1)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def hookTest Node {
      assert(kind == .HOOK)
      assert(childCount == 3)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def hookTrue Node {
      assert(kind == .HOOK)
      assert(childCount == 3)
      assert(_firstChild._nextSibling.kind.isExpression)
      return _firstChild._nextSibling
    }

    def hookFalse Node {
      assert(kind == .HOOK)
      assert(childCount == 3)
      assert(_lastChild.kind.isExpression)
      return _lastChild
    }

    def asString string {
      assert(kind == .DOT)
      assert(_text != null)
      return _text
    }

    def asBool bool {
      assert(kind == .BOOL)
      return _literal as bool
    }

    def asFloat double {
      assert(kind == .FLOAT)
      return _literal
    }

    def asInt int {
      assert(kind == .INT)
      return _literal as int
    }

    def unaryValue Node {
      assert(kind.isUnary)
      assert(childCount == 1)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def binaryLeft Node {
      assert(kind.isBinary)
      assert(childCount == 2)
      assert(_firstChild.kind.isExpression)
      return _firstChild
    }

    def binaryRight Node {
      assert(kind.isBinary)
      assert(childCount == 2)
      assert(_lastChild.kind.isExpression)
      return _lastChild
    }
  }

  namespace Node {
    def _createID int {
      _nextID++
      return _nextID
    }

    var _nextID = 0
  }

  class Node {
    # This is just for debugging
    def toString string {
      var text = "(" + kind.toString.toLowerCase.replaceAll("_", "-")

      switch kind {
        case .BOOL { text += " \(asBool)" }
        case .INT { text += " \(asInt)" }
        case .FLOAT { text += " \(asFloat)" }
        case .TYPE { text += " \(resolvedType)" }
        case .NAME { text += " \(symbol.name)" }

        default {
          for child = firstChild; child != null; child = child.nextSibling {
            text += "\n  " + child.toString.replaceAll("\n", "\n  ")
          }

          if kind == .DOT {
             text += "\n  \(_text)"
          }
        }
      }

      return text + ")"
    }
  }
}
