namespace GLSLX {
  enum OutputFormat {
    OBJECT
    JSON
    CPP
    SKEW
  }

  enum RenameSymbols {
    ALL
    INTERNAL_ONLY
    NONE
  }

  class CompilerOptions {
    var compactSyntaxTree = true
    var removeWhitespace = true
    var renameSymbols = RenameSymbols.ALL
    var trimSymbols = true
    var fileAccess fn(string, string) Source = null
  }

  enum ExtensionBehavior {
    DEFAULT
    DISABLE
    ENABLE
    REQUIRE
    WARN
  }

  class CompilerData {
    const currentExtensions StringMap<ExtensionBehavior> = {}
    var fileAccess fn(string, string) Source
    var _nextSymbolID = 0

    def nextSymbolID int {
      _nextSymbolID++
      return _nextSymbolID
    }

    def extensionBehavior(name string) ExtensionBehavior {
      return currentExtensions.get(name, .DEFAULT)
    }
  }

  class CompilerResult {
    const shaders List<Source>
    const renaming StringMap<string>
    const uniforms StringMap<StringMap<string>>
    const attributes StringMap<StringMap<string>>

    def output(format OutputFormat) string {
      switch format {
        case .OBJECT {
          return toJSON
        }

        case .JSON {
          return dynamic.JSON.stringify(toJSON, null, 2) + "\n"
        }

        case .CPP {
          if shaders != null {
            var code = ""
            code += "#ifndef GLSLX_STRINGS_H\n"
            code += "#define GLSLX_STRINGS_H\n"
            code += "\n"
            for shader in shaders {
              code += "static const char *GLSLX_SOURCE_\(_transformName(shader.name)) = \(dynamic.JSON.stringify(shader.contents));\n"
            }
            code += "\n"
            if renaming != null {
              for name in renaming.keys {
                code += "static const char *GLSLX_NAME_\(_transformName(name)) = \(dynamic.JSON.stringify(renaming[name]));\n"
              }
              code += "\n"
            }
            code += "#endif\n"
            return code
          }
        }

        case .SKEW {
          if shaders != null {
          var code = ""
            for shader in shaders {
              code += "const GLSLX_SOURCE_\(_transformName(shader.name)) = \(dynamic.JSON.stringify(shader.contents))\n"
            }
            if renaming != null {
              code += "\n"
              for name in renaming.keys {
                code += "const GLSLX_NAME_\(_transformName(name)) = \(dynamic.JSON.stringify(renaming[name]))\n"
              }
            }
            return code
          }
        }
      }
      return null
    }

    def toJSON dynamic {
      return {
        "shaders": shaders == null ? null : shaders.map<dynamic>(source => ({
          "name": source.name,
          "contents": source.contents,
          "attributes": source.name in attributes ? attributes[source.name] : StringMap<string>.new,
          "uniforms": source.name in uniforms ? uniforms[source.name] : StringMap<string>.new,
        })),
        "renaming": renaming
      }
    }

    def _transformName(name string) string {
      return (name as dynamic).replace(dynamic.RegExp.new("([a-z0-9])([A-Z])", "g"), "$1_$2").toUpperCase()
    }
  }
}

namespace GLSLX.Compiler {
  def typeCheck(log Log, sources List<Source>, options CompilerOptions) Node {
    if log.hasErrors {
      return null
    }

    # Generate tokens once
    sources.prepend(Source.new("<api>", API))
    for source in sources {
      source.tokens = Tokenizer.tokenize(log, source)
    }

    var global = Node.createGlobal
    var scope = Scope.new(.GLOBAL, null)
    var data = CompilerData.new(options.fileAccess)
    var resolver = Resolver.new(log, data)

    # Parse everything next
    for source in sources {
      Parser.parse(log, source.tokens, global, data, scope, resolver)
    }

    # Then run type checking
    resolver.resolveGlobal(global)

    # Always return even when there were errors since the partial result is still useful
    return global
  }

  def compile(log Log, sources List<Source>, options CompilerOptions) CompilerResult {
    if log.hasErrors {
      return null
    }

    # Generate tokens once
    sources.prepend(Source.new("<api>", API))
    for source in sources {
      source.tokens = Tokenizer.tokenize(log, source)
    }

    var global = Node.createGlobal
    var scope = Scope.new(.GLOBAL, null)
    var data = CompilerData.new(options.fileAccess)
    var resolver = Resolver.new(log, data)

    # Parse everything next
    for source in sources {
      Parser.parse(log, source.tokens, global, data, scope, resolver)
    }

    # Then run type checking
    resolver.resolveGlobal(global)

    if log.hasErrors {
      return null
    }

    # Multiple export mode is more complicated. Everything is already compiled,
    # and in theory we could quickly export all shaders from that, but in
    # practice it's simpler if the source code is just compiled over again once
    # per shader.
    var names List<string> = []
    var globals List<Node> = []
    const uniforms = StringMap<StringMap<string>>.new
    const attributes = StringMap<StringMap<string>>.new

    for root in _collectAllExportedFunctions(scope) {
      var shaderGlobal = Node.createGlobal
      var shaderScope = Scope.new(.GLOBAL, null)
      var shaderData = CompilerData.new(options.fileAccess)
      var shaderLog = Log.new
      var shaderResolver = Resolver.new(shaderLog, shaderData)

      # Parse everything again
      for source in sources {
        Parser.parse(shaderLog, source.tokens, shaderGlobal, shaderData, shaderScope, shaderResolver)
      }

      # Flow types through the tree
      shaderResolver.resolveGlobal(shaderGlobal)

      # Optimize it and trim it down
      _unexportAllFunctionsExcept(shaderScope, root)
      Rewriter.rewrite(shaderGlobal, shaderData, options)
      globals.append(shaderGlobal)
      names.append(root.name)

      for i in 0..shaderGlobal.childCount {
        const child = shaderGlobal.childAt(i)

        if child.kind != .VARIABLES {
          continue
        }

        const node = child.childAt(0)
        const variableType = node.resolvedType.symbol.name

        if variableType == "<error>" {
          continue
        }

        for variableIndex in 1..child.childCount {
          const symbol = child.childAt(variableIndex).symbol

          if symbol.isAttribute {
            if !(root.name in attributes) {
              attributes[root.name] = StringMap<string>.new
            }

            attributes[root.name][symbol.name] = variableType
          }
          else if symbol.isUniform {
            if !(root.name in uniforms) {
              uniforms[root.name] = StringMap<string>.new
            }
            
            uniforms[root.name][symbol.name] = variableType
          }
        }
      }
    }

    # Rename everything together
    var shaders List<Source> = []
    var renaming = Renamer.rename(globals, options)
    for i in 0..names.count {
      shaders.append(Source.new(names[i], Emitter.emit(globals[i], options)))
    }
    return CompilerResult.new(shaders, renaming, uniforms, attributes)
  }

  def _collectAllExportedFunctions(scope Scope) List<FunctionSymbol> {
    var symbols List<FunctionSymbol> = []
    for symbol in scope.symbols.values {
      if symbol.isFunction && symbol.isExported {
        symbols.append(symbol.asFunction)
      }
    }
    return symbols
  }

  def _unexportAllFunctionsExcept(scope Scope, function FunctionSymbol) {
    for symbol in scope.symbols.values {
      if symbol.id != function.id {
        symbol.flags &= ~.EXPORTED
      } else {
        symbol.name = "main"
        var sibling = symbol.asFunction.sibling
        if sibling != null {
          sibling.name = symbol.name
        }
      }
    }
  }
}
