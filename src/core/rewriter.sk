namespace GLSLX.Rewriter {
  def rewrite(global Node, data CompilerData, options CompilerOptions) {
    while true {
      var rewriter = Rewriter.new

      if options.compactSyntaxTree {
        rewriter._compact(global)
      }

      if options.trimSymbols {
        rewriter._scanSymbols(global)
        rewriter._trimSymbols(global)
        rewriter._trimUnreferencedExtensions(global, data)
      }

      if !rewriter._codeWasChanged {
        break
      }
    }

    # Braces removal around "if" statements is subtle due to the dangling else
    # problem:
    #
    #   "if (a) { if (b) c; } else d;" => must keep braces
    #   "if (a) { for (;;) if (b) c; } else d;" => must keep braces
    #   "if (a) { for (;;) { if (b) c; } } else d;" => "if (a) for (;;) { if (b) c; } else d;" or "if (a) { for (;;) if (b) c; } else d;"
    #
    # Instead of trying to preserve all of this during various transforms, just
    # add it back at the end.
    if options.compactSyntaxTree {
      _addBracesToAvoidDanglingElseIssues(global)
    }
  }

  # Returns true if braces are required
  def _addBracesToAvoidDanglingElseIssues(node Node) bool {
    switch node.kind {
      case .IF {
        if node.ifFalse == null {
          return true
        }
        var yes = node.ifTrue
        var needsBraces = _addBracesToAvoidDanglingElseIssues(yes)
        if needsBraces && yes.kind != .BLOCK {
          yes.replaceWith(Node.createBlock.appendChild(yes.cloneAndStealChildren))
        }
        return _addBracesToAvoidDanglingElseIssues(node.ifFalse)
      }

      case .FOR {
        return _addBracesToAvoidDanglingElseIssues(node.forBody)
      }

      case .FUNCTION {
        var function = node.symbol.asFunction
        if function.block != null {
          _addBracesToAvoidDanglingElseIssues(function.block)
        }
      }

      case .WHILE {
        return _addBracesToAvoidDanglingElseIssues(node.whileBody)
      }

      default {
        for child = node.firstChild; child != null; child = child.nextSibling {
          _addBracesToAvoidDanglingElseIssues(child)
        }
        return false
      }
    }

    return false
  }
}

class GLSLX.Rewriter {
  var _codeWasChanged = false
  var _variables List<VariableSymbol> = []
  var _useCounts IntMap<int> = {}
  var _mutationCounts IntMap<int> = {}
  var _referencedExtensions StringMap<int> = {}

  def _reportCodeChange {
    _codeWasChanged = true
  }

  def _scanSymbols(node Node) {
    for child = node.firstChild; child != null; child = child.nextSibling {
      _scanSymbols(child)
    }

    switch node.kind {
      case .VARIABLE {
        var variable = node.symbol.asVariable
        if variable.value != null {
          _scanSymbols(variable.value)
        }
        if variable.kind == .LOCAL || variable.kind == .GLOBAL {
          _variables.append(variable)
          _useCounts[variable.id] = 0
          _mutationCounts[variable.id] = 0
        }
      }

      case .FUNCTION {
        var function = node.symbol.asFunction
        _useCounts[function.id] = 0
        if function.block != null {
          _scanSymbols(function.block)
        }
      }

      case .NAME {
        # Track uses
        var id = node.symbol.id
        var count = _useCounts.get(id, -1)
        if count != -1 {
          _useCounts[id] = count + 1
        }

        # Track mutations
        if node.isUsedInStorage {
          count = _mutationCounts.get(id, -1)
          if count != -1 {
            _mutationCounts[id] = count + 1
          }
        }

        # Track referenced extensions
        var name = node.symbol.requiredExtension
        if name != null {
          _referencedExtensions[name] = 0
        }
      }
    }
  }

  def _trimSymbols(node Node) {
    for child = node.firstChild, next Node = null; child != null; child = next {
      next = child.nextSibling
      _trimSymbols(child)
    }

    switch node.kind {
      case .VARIABLE {
        if _hasLiteralConstantValue(node.symbol) || _isNonMutatedLiteral(node.symbol) ||
            _isUnused(node.symbol) && (
              node.variableInitializer == null ||
              node.variableInitializer.hasNoSideEffects ||
              node.symbol.constantValue != null
            ) {
          node.remove
          _reportCodeChange
        } else {
          if node.variableInitializer != null {
            _trimSymbols(node.variableInitializer)
          }

          # The array count "int x[1]" is not in the AST and will not be
          # visited during an AST traversal. Special-case it here so constants
          # inside it are still replaced.
          var arrayCount = node.symbol.asVariable.arrayCount
          if arrayCount != null && arrayCount.kind == .NAME {
            var clone = _literalConstantForSymbol(arrayCount.symbol)
            if clone != null {
              node.symbol.asVariable.arrayCount = clone
              _reportCodeChange
            }
          }
        }
      }

      case .FUNCTION {
        var function = node.symbol.asFunction
        if _isUnused(function) && !function.isExported {
          node.remove
          _reportCodeChange
        } else if function.block != null {
          _trimSymbols(function.block)
        }
      }

      case .VARIABLES {
        if node.variablesType.nextSibling == null {
          # If it lives in a block or is global, remove it. Otherwise we can't
          # blindly remove it, or we risk removing the true-branch of an
          # if-statement or the body of a for-loop, leading to an invalid AST.
          var parentKind = node.parent.kind
          if parentKind == .BLOCK || parentKind == .GLOBAL || parentKind == .STRUCT {
            node.remove
          } else if parentKind == .FOR {
            node.become(Node.createSequence)
          } else {
            node.become(Node.createBlock)
          }
          _reportCodeChange
        }
      }

      case .NAME {
        var clone = _literalConstantForSymbol(node.symbol)
        if clone != null {
          node.replaceWith(clone)
          _reportCodeChange
        }
      }
    }
  }

  def _literalConstantForSymbol(symbol Symbol) Node {
    if _hasLiteralConstantValue(symbol) {
      return symbol.constantValue.clone
    }

    if _isNonMutatedLiteral(symbol) {
      return symbol.asVariable.value.clone
    }

    return null
  }

  def _trimUnreferencedExtensions(node Node, data CompilerData) {
    for child = node.firstChild, next Node = null; child != null; child = next {
      next = child.nextSibling
      if child.kind == .EXTENSION && !(child.extensionName in _referencedExtensions) && data.extensionBehavior(child.extensionName) == .DEFAULT {
        child.remove
      }
    }
  }

  def _isUnused(symbol Symbol) bool {
    return _useCounts.get(symbol.id, -1) == 0 && (
      !symbol.isFunction ||
      symbol.asFunction.sibling == null ||
      _useCounts.get(symbol.asFunction.sibling.id, -1) == 0)
  }

  def _hasLiteralConstantValue(symbol Symbol) bool {
    return symbol.constantValue != null && symbol.constantValue.kind.isLiteral
  }

  def _isNonMutatedLiteral(symbol Symbol) bool {
    return _mutationCounts.get(symbol.id, -1) == 0 && symbol.asVariable.value != null && symbol.asVariable.value.kind.isLiteral
  }

  def _compact(node Node) {
    for child = node.firstChild, next Node = null; child != null; child = next {
      next = child.nextSibling
      _compact(child)
    }

    switch node.kind {
      case .VARIABLE {
        var variable = node.symbol.asVariable
        if variable.value != null {
          _compact(variable.value)
        }
      }

      case .BLOCK {
        # Remove everything after a jump
        for child = node.firstChild; child != null; child = child.nextSibling {
          if !child.kind.isJump {
            continue
          }
          if child.nextSibling != null {
            while child.nextSibling != null {
              child.nextSibling.remove
            }
            _reportCodeChange
          }
        }

        # Collapse this block into the parent block if possible, being careful about scope
        if node.parent != null && node.parent.kind == .BLOCK {
          var mayNeedScope = false
          for child = node.firstChild; child != null; child = child.nextSibling {
            if child.kind == .VARIABLES {
              mayNeedScope = true
            }
          }
          if !mayNeedScope {
            node.replaceWithChildren
            _reportCodeChange
            return
          }
        }
      }

      case .EXPRESSION {
        if node.parent.kind == .BLOCK {
          # Remove unnecessary expressions
          if node.expressionValue.hasNoSideEffects {
            node.remove
            _reportCodeChange
            return
          }

          # Combine with a previous expression, if any (may open up more
          # compacting opportunities in the future)
          var previous = node.previousSibling
          if previous != null && previous.kind == .EXPRESSION {
            var value = node.expressionValue.remove
            node.appendChild(Node.createSequence.appendChild(previous.remove.expressionValue.remove).appendChild(value))
            _reportCodeChange
            return
          }
        }
      }

      case .DO_WHILE {
        _compactBlockStatement(node.doWhileBody)

        # Do-while with false is no different than a normal block. It is
        # different than just replacing itself with its body though
        # because the body may have shadowing variables that could conflict.
        if node.doWhileTest.isFalse {
          node.replaceWith(Node.createBlock.appendChild(node.doWhileBody.remove))
          _reportCodeChange
        }
      }

      case .FOR {
        _compactBlockStatement(node.forBody)

        # Tuck the previous expression inside the setup location if empty
        if node.forSetup == null && node.previousSibling != null && node.previousSibling.kind == .EXPRESSION {
          node.firstChild.replaceWith(node.previousSibling.expressionValue.remove)
          node.previousSibling.remove
          _reportCodeChange
        }

        # No need to keep "true" around
        if node.forTest != null && node.forTest.isTrue {
          node.forTest.replaceWith(Node.createSequence)
          _reportCodeChange
        }

        # Remove trailing continues
        if node.forBody.kind == .CONTINUE {
          node.forBody.replaceWith(Node.createBlock)
          _reportCodeChange
        } else {
          while node.forBody.hasChildren && node.forBody.lastChild.kind == .CONTINUE {
            node.forBody.lastChild.remove
            _reportCodeChange
          }
        }
      }

      case .FUNCTION {
        var function = node.symbol.asFunction
        if function.block != null {
          _compact(function.block)
        }
      }

      case .IF {
        _compactBlockStatement(node.ifTrue)
        if node.ifFalse != null {
          _compactBlockStatement(node.ifFalse)
        }

        # Special-case "true"
        if node.ifTest.isTrue {
          node.replaceWith(node.ifTrue.remove)
          _reportCodeChange
          return
        }

        # Special-case "false"
        if node.ifTest.isFalse {
          if node.ifFalse != null {
            node.replaceWith(node.ifFalse.remove)
          } else {
            node.remove
          }
          _reportCodeChange
          return
        }

        # Turn if-else statements into a single return statement
        if node.ifFalse != null && node.ifTrue.kind == .RETURN && node.ifFalse.kind == .RETURN {
          var yes = node.ifTrue.returnValue
          var no = node.ifFalse.returnValue
          if yes != null && no != null {
            node.replaceWith(Node.createReturn(Node.createHook(node.ifTest.remove, yes.remove, no.remove).withType(yes.resolvedType)))
            _reportCodeChange
            return
          }
        }

        # Turn if-else statements into shorter conditional expressions when possible
        if node.ifFalse != null && node.ifTrue.kind == .EXPRESSION && node.ifFalse.kind == .EXPRESSION {
          var yes = node.ifTrue.expressionValue
          var no = node.ifFalse.expressionValue
          if yes.resolvedType == no.resolvedType {
            node.replaceWith(Node.createExpression(Node.createHook(node.ifTest.remove, yes.remove, no.remove).withType(yes.resolvedType)))
            _reportCodeChange
            return
          }
        }

        # Also turn if statements without else blocks into shorter conditional expressions when possible
        if node.ifFalse == null && node.ifTrue.kind == .EXPRESSION {
          var yes = node.ifTrue.expressionValue

          # Only check assignments to local names in case global names aren't renamed (then it will be longer, not shorter)
          var isAssignToArgumentOrLocalName = yes.kind == .ASSIGN && yes.binaryLeft.kind == .NAME && yes.binaryLeft.symbol.isArgumentOrLocalVariable
          if yes.resolvedType == .INT || yes.resolvedType == .FLOAT || isAssignToArgumentOrLocalName {
            var value =
              isAssignToArgumentOrLocalName ? yes.binaryLeft.clone :
              yes.resolvedType == .INT ? Node.createInt(0) :
              Node.createFloat(0)
            node.replaceWith(Node.createExpression(Node.createHook(node.ifTest.remove, yes.remove, value).withType(yes.resolvedType)))
            _reportCodeChange
            return
          }
        }

        # Inline a true-only branch
        if node.ifFalse == null && node.ifTrue.kind == .IF && node.ifTrue.ifFalse == null {
          var left = node.ifTest
          var right = node.ifTrue.ifTest
          var body = node.ifTrue.ifTrue
          left.become(Node.createBinary(.LOGICAL_AND, left.cloneAndStealChildren, right.remove).withType(.BOOL))
          node.ifTrue.become(body.remove)
          _reportCodeChange
          return
        }

        # Remove an empty true branch
        if node.ifTrue.isEmptyBlock {
          if node.ifFalse != null {
            node.ifTest.invertBooleanCondition
            node.ifTrue.remove
          } else {
            node.replaceWith(Node.createExpression(node.ifTest.remove))
          }
          _reportCodeChange
          return
        }

        # Remove an empty false branch
        if node.ifFalse != null && node.ifFalse.isEmptyBlock {
          node.ifFalse.remove
          _reportCodeChange
          return
        }
      }

      case .RETURN {
        # Merge with previous if statements if possible
        var previous = node.previousSibling
        while previous != null && previous.kind == .IF && previous.ifFalse == null && previous.ifTrue.kind == .RETURN {
          var yes = previous.ifTrue.returnValue
          var no = node.returnValue
          if yes == null || no == null {
            break
          }
          node.replaceWith(Node.createReturn(Node.createHook(previous.ifTest.remove, yes.remove, no.remove).withType(yes.resolvedType)))
          previous.remove
          previous = node.previousSibling
          _reportCodeChange
        }
      }

      case .VARIABLES {
        for previous = node.previousSibling; previous != null; previous = previous.previousSibling {
          if previous.kind != .VARIABLES {
            break
          }

          # Combine with a previous variable block if the types and modifiers match
          if previous.variablesType.resolvedType == node.variablesType.resolvedType && previous.variablesFlags == node.variablesFlags {
            while previous.lastChild != previous.variablesType {
              node.insertChildBefore(node.variablesType.nextSibling, previous.lastChild.remove)
            }
            previous.remove
            _reportCodeChange
            return
          }

          # Only skip over variable blocks if all variables have constant initializers
          for child = previous.variablesType.nextSibling; child != null; child = child.nextSibling {
            var initializer = child.variableInitializer
            if initializer != null && !initializer.kind.isLiteral {
              return
            }
          }
        }
      }

      case .WHILE {
        # Turn into a for loop since they are more versatile
        var test = node.whileTest
        var body = node.whileBody
        node.replaceWith(Node.createFor(null, test.remove, null, body.remove))
        _reportCodeChange
      }

      case .HOOK {
        var test = node.hookTest
        var yes = node.hookTrue
        var no = node.hookFalse

        # Special-case "true"
        if test.isTrue {
          node.become(yes.remove)
          _reportCodeChange
          return
        }

        # Special-case "false"
        if test.isFalse {
          node.become(no.remove)
          _reportCodeChange
          return
        }

        # Special-case binary operators on both branches, likely assignments.
        # Ignore INDEX expressions because GLSL requires the index value to
        # be a constant expression, and HOOK expressions aren't constant.
        if yes.kind == no.kind && yes.kind.isBinary && yes.binaryLeft.looksTheSameAs(no.binaryLeft) && yes.kind != .INDEX {
          var common = yes.binaryLeft
          var left = yes.binaryRight
          var right = no.binaryRight
          var value = Node.createHook(test.remove, left.remove, right.remove)
          node.become(Node.createBinary(yes.kind, common.remove, value))
          _reportCodeChange
          return
        }

        # Special-case an assignment and the assignment target, generated by if statement conversion
        if yes.kind == .ASSIGN && yes.binaryLeft.looksTheSameAs(no) && no.hasNoSideEffects {
          var common = yes.binaryLeft
          var left = yes.binaryRight
          var value = Node.createHook(test.remove, left.remove, no.remove)
          node.become(Node.createBinary(.ASSIGN, common.remove, value))
          _reportCodeChange
          return
        }
      }

      case .SEQUENCE {
        # Remove elements without side effects
        for child = node.firstChild, next Node = null; child != node.lastChild; child = next {
          next = child.nextSibling
          if child.hasNoSideEffects {
            child.remove
            _reportCodeChange
          }
        }

        # Inline nested sequences into their parent
        if node.parent.kind == .SEQUENCE {
          node.replaceWithChildren
          _reportCodeChange
          return
        }

        # Inline single-element sequences
        if node.hasOneChild {
          node.become(node.firstChild.remove)
          _reportCodeChange
          return
        }
      }

      case .NEGATIVE {
        var value = node.unaryValue

        # "- -a" => "a"
        if value.kind == .NEGATIVE {
          node.become(value.unaryValue.remove)
          _reportCodeChange
        }

        # Constant folding
        else if value.kind == .INT { _changeToInt(node, -value.asInt) }
        else if value.kind == .FLOAT { _changeToFloat(node, -value.asFloat) }
      }

      case .NOT {
        var value = node.unaryValue

        # "!!a" => "a"
        if value.kind == .NOT {
          node.become(value.unaryValue.remove)
          _reportCodeChange
        }

        # Constant folding
        else if value.kind == .BOOL { _changeToBool(node, !value.asBool) }
      }

      case .POSITIVE {
        node.become(node.unaryValue.remove)
      }

      case .ADD {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "0 + a" => "a"
        if left.isIntOrFloat(0) {
          node.become(right.remove)
          _reportCodeChange
        }

        # "a + 0" => "a"
        else if right.isIntOrFloat(0) {
          node.become(left.remove)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToInt(node, left.asInt + right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToFloat(node, left.asFloat + right.asFloat) }
      }

      case .CALL {
        var target = node.callTarget

        # Optimize constructor calls
        if target.kind == .TYPE {
          var type = target.resolvedType

          # "float(123)" => "123.0"
          if type == .FLOAT {
            var child = target.nextSibling
            if child != null && child.nextSibling == null && child.kind == .INT {
              _changeToFloat(node, child.asInt)
            }
          }

          # "vec2(1.0, 2.0)" => "vec2(1, 2)"
          else if type.componentType == .FLOAT {
            for child = target.nextSibling; child != null; child = child.nextSibling {
              if child.kind == .FLOAT {
                var floatValue = child.asFloat
                var intValue = floatValue as int
                if floatValue == intValue {
                  _changeToInt(child, intValue)
                }
              }
            }
          }
        }
      }

      case .DIVIDE {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "a / 1" => "a"
        if right.isIntOrFloat(1) {
          node.become(left.remove)
          _reportCodeChange
        }

        # Constant folding (division by 0 is undefined so whatever)
        else if left.kind == .INT && right.kind == .INT { _changeToInt(node, right.asInt != 0 ? left.asInt / right.asInt : 0) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToFloat(node, right.asFloat != 0 ? left.asFloat / right.asFloat : 0) }
      }

      case .EQUAL {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "a == a" => "true"
        if left.looksTheSameAs(right) && left.hasNoSideEffects {
          _changeToBool(node, true)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToBool(node, left.asInt == right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToBool(node, left.asFloat == right.asFloat) }
      }

      case .GREATER_THAN {
        var left = node.binaryLeft
        var right = node.binaryRight

        # Constant folding
        if left.kind == .INT && right.kind == .INT { _changeToBool(node, left.asInt > right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToBool(node, left.asFloat > right.asFloat) }
      }

      case .GREATER_THAN_OR_EQUAL {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "1 >= a" => "2 > a"
        if left.kind == .INT {
          node.kind = .GREATER_THAN
          left.withInt(left.asInt + 1)
          _reportCodeChange
        }

        # "a >= 1" => "a > 0"
        else if right.kind == .INT {
          node.kind = .GREATER_THAN
          right.withInt(right.asInt - 1)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToBool(node, left.asInt >= right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToBool(node, left.asFloat >= right.asFloat) }
      }

      case .INDEX {
        var left = node.binaryLeft
        var right = node.binaryRight
        var type = left.resolvedType

        # Replace with a swizzle
        if right.kind == .INT {
          var index = right.asInt
          var bound = 0
          switch type {
            case .BVEC2, .IVEC2, .VEC2 { bound = 2 }
            case .BVEC3, .IVEC3, .VEC3 { bound = 3 }
            case .BVEC4, .IVEC4, .VEC4 { bound = 4 }
          }
          if index >= 0 && index < bound {
            node.become(Node.createDot(left.remove, "xyzw".get(index)).withType(node.resolvedType))
            _reportCodeChange
          }
        }
      }

      case .LESS_THAN {
        var left = node.binaryLeft
        var right = node.binaryRight

        # Constant folding
        if left.kind == .INT && right.kind == .INT { _changeToBool(node, left.asInt < right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToBool(node, left.asFloat < right.asFloat) }
      }

      case .LESS_THAN_OR_EQUAL {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "1 <= a" => "0 < a"
        if left.kind == .INT {
          node.kind = .LESS_THAN
          left.withInt(left.asInt - 1)
          _reportCodeChange
        }

        # "a <= 1" => "a < 2"
        else if right.kind == .INT {
          node.kind = .LESS_THAN
          right.withInt(right.asInt + 1)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToBool(node, left.asInt <= right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToBool(node, left.asFloat <= right.asFloat) }
      }

      case .LOGICAL_AND {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "true && a" => "a"
        if left.kind == .BOOL && left.isTrue {
          node.become(right.remove)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .BOOL && left.isFalse { _changeToBool(node, false) }
        else if left.kind == .BOOL && right.kind == .BOOL { _changeToBool(node, left.asBool && right.asBool) }
      }

      case .LOGICAL_OR {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "false || a" => "a"
        if left.kind == .BOOL && left.isFalse {
          node.become(right.remove)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .BOOL && left.isTrue { _changeToBool(node, true) }
        else if left.kind == .BOOL && right.kind == .BOOL { _changeToBool(node, left.asBool && right.asBool) }
      }

      case .LOGICAL_XOR {
        var left = node.binaryLeft
        var right = node.binaryRight

        # Constant folding
        if left.kind == .BOOL && right.kind == .BOOL { _changeToBool(node, left.asBool != right.asBool) }
      }

      case .MULTIPLY {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "1 * a" => "a"
        if left.kind == .INT && left.asInt == 1 {
          node.become(right.remove)
          _reportCodeChange
        }

        # "a * 1" => "a"
        else if right.kind == .INT && right.asInt == 1 {
          node.become(left.remove)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToInt(node, left.asInt * right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToFloat(node, left.asFloat * right.asFloat) }
      }

      case .NOT_EQUAL {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "a != a" => "false"
        if left.looksTheSameAs(right) && left.hasNoSideEffects {
          _changeToBool(node, false)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToBool(node, left.asInt != right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToBool(node, left.asFloat != right.asFloat) }
      }

      case .SUBTRACT {
        var left = node.binaryLeft
        var right = node.binaryRight

        # "0 - a" => "-a"
        if left.isIntOrFloat(0) {
          node.become(Node.createUnary(.NEGATIVE, right.remove).withType(node.resolvedType))
          _reportCodeChange
        }

        # "a - 0" => "a"
        else if right.isIntOrFloat(0) {
          node.become(left.remove)
          _reportCodeChange
        }

        # Constant folding
        else if left.kind == .INT && right.kind == .INT { _changeToInt(node, left.asInt - right.asInt) }
        else if left.kind == .FLOAT && right.kind == .FLOAT { _changeToFloat(node, left.asFloat - right.asFloat) }
      }
    }
  }

  def _changeToBool(node Node, value bool) {
    node.become(Node.createBool(value).withType(.BOOL))
    _reportCodeChange
  }

  def _changeToFloat(node Node, value double) {
    node.become(Node.createFloat(value).withType(.BOOL))
    _reportCodeChange
  }

  def _changeToInt(node Node, value int) {
    node.become(Node.createInt(value).withType(.BOOL))
    _reportCodeChange
  }

  def _compactBlockStatement(node Node) {
    if node.kind == .BLOCK && node.hasOneChild {
      node.replaceWith(node.firstChild.remove)
      _reportCodeChange
    }
  }
}
