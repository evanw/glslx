class GLSLX.Resolver {
  const _log Log
  const _data CompilerData
  const _controlFlow = ControlFlowAnalyzer.new
  const _versions List<Node> = []
  const _generatedExtensions StringMap<Node> = {}
  var _returnType Type = null

  def resolveGlobal(global Node) {
    resolveNode(global)

    # Remove all version statements
    for version in _versions {
      version.remove
    }

    # Re-insert the first version statement
    var first = global.firstChild
    if !_versions.isEmpty {
      global.insertChildBefore(first, _versions.first)
    }

    # Insert all automatically generated extensions
    for extension in _generatedExtensions.values {
      global.insertChildBefore(first, extension)
    }

    # Constants may end up being marked as unused because they are resolved
    # early during parsing due to how the language works. However, we don't
    # want them to show up as unused in the IDE. Post-process the unused
    # symbol list to filter out constants that were later used.
    _log.unusedSymbols = _log.unusedSymbols.filter(x => x.useCount == 0)
  }

  def _maybeMarkAsUnused(symbol Symbol) {
    if symbol.range.source.name != API_NAME && symbol.useCount == 0 && !symbol.isExported {
      _log.unusedSymbols.append(symbol)
    }
  }

  def resolveNode(node Node) {
    if node.resolvedType != null {
      return
    }

    node.resolvedType = .ERROR

    var kind = node.kind
    switch kind {
      case .GLOBAL, .STRUCT_BLOCK {
        _resolveChildren(node)
      }

      case .VARIABLE {
        var symbol = node.symbol.asVariable
        _maybeMarkAsUnused(symbol)
        resolveNode(symbol.type)

        # Variables must have a type
        var type = symbol.type.resolvedType
        if type == .VOID {
          _log.semanticErrorBadVariableType(symbol.type.range, type)
          type = .ERROR
        }

        # Array size
        if symbol.arrayCount != null {
          _resolveAsExpression(symbol.arrayCount)
          checkConversion(symbol.arrayCount, .INT)
        }

        # Initial value
        if symbol.value != null {
          _resolveAsExpression(symbol.value)
          checkConversion(symbol.value, type)
          if type.containsArray {
            _log.semanticErrorArrayAssignment(node.internalRange, type)
          }
        }

        # Constants must be initialized
        if symbol.isConst {
          if symbol.value != null {
            if symbol.value.resolvedType != .ERROR {
              var folded = Folder.fold(symbol.value)
              if folded == null {
                _log.syntaxErrorConstantRequired(symbol.value.range)
              } else {
                assert(folded.parent == null)
                assert(folded.resolvedType != null)
                symbol.constantValue = folded
              }
            }
          } else if symbol.kind == .LOCAL {
            _log.semanticErrorUninitializedConstant(symbol.range)
          }
        }
      }

      case .BLOCK {
        _resolveBlockOrStatement(node)
      }

      case .BREAK, .CONTINUE, .DISCARD {
      }

      case .DO_WHILE {
        _resolveBlockOrStatement(node.doWhileBody)
        resolveNode(node.doWhileTest)
        checkConversion(node.doWhileTest, .BOOL)
      }

      case .EXPRESSION {
        resolveNode(node.expressionValue)
      }

      case .EXTENSION {
      }

      case .FOR {
        if node.forSetup != null {
          _resolveAsExpression(node.forSetup)
        }
        if node.forTest != null {
          _resolveAsExpression(node.forTest)
          checkConversion(node.forTest, .BOOL)
        }
        if node.forUpdate != null {
          _resolveAsExpression(node.forUpdate)
        }
        _resolveBlockOrStatement(node.forBody)
      }

      case .FUNCTION {
        var symbol = node.symbol.asFunction
        _maybeMarkAsUnused(symbol)
        for argument in symbol.arguments {
          resolveNode(argument.type)
        }
        resolveNode(symbol.returnType)
        if symbol.block != null {
          _returnType = symbol.returnType.resolvedType
          _resolveBlockOrStatement(symbol.block)

          # Missing a return statement is an error
          if _returnType != null && _returnType != .VOID && symbol.block.hasControlFlowAtEnd {
            _log.semanticErrorMissingReturn(symbol.range, symbol.name, _returnType)
          }

          _returnType = null
        }
      }

      case .IF {
        resolveNode(node.ifTest)
        checkConversion(node.ifTest, .BOOL)
        _resolveBlockOrStatement(node.ifTrue)
        if node.ifFalse != null {
          _resolveBlockOrStatement(node.ifFalse)
        }
      }

      case .PRECISION {
      }

      case .RETURN {
        if node.returnValue != null {
          resolveNode(node.returnValue)
          checkConversion(node.returnValue, _returnType ?? .ERROR)
        } else {
          node.resolvedType = .VOID
          checkConversion(node, _returnType ?? .ERROR)
        }
      }

      case .STRUCT {
        var symbol = node.symbol.asStruct
        _maybeMarkAsUnused(symbol)
        _resolveChildren(node)

        # A struct loses operator "==" and "!=" when it contains a type without those operators
        var resolvedType = symbol.resolvedType
        for variable in symbol.asStruct.variables {
          var type = variable.type.resolvedType
          if type.containsArray { resolvedType.containsArray = true }
          if type.containsSampler { resolvedType.containsSampler = true }
        }
      }

      case .VARIABLES {
        _resolveChildren(node)
      }

      case .VERSION {
        _versions.append(node)
      }

      case .WHILE {
        resolveNode(node.whileTest)
        checkConversion(node.whileTest, .BOOL)
        _resolveBlockOrStatement(node.whileBody)
      }

      case .CALL {
        _resolveCall(node)
      }

      case .DOT {
        _resolveDot(node)
      }

      case .HOOK {
        var test = node.hookTest
        var no = node.hookFalse
        var yes = node.hookTrue

        _resolveAsExpression(test)
        checkConversion(test, .BOOL)
        _resolveAsExpression(yes)
        _resolveAsExpression(no)

        if yes.resolvedType != no.resolvedType {
          _log.semanticErrorBadHookTypes(Range.span(yes.range, no.range), yes.resolvedType, no.resolvedType)
        } else if yes.resolvedType.containsArray {
          _log.semanticErrorArrayHook(Range.span(yes.range, no.range), yes.resolvedType)
        } else {
          node.resolvedType = yes.resolvedType
        }
      }

      case .NAME {
        var symbol = node.symbol

        if symbol.isVariable {
          resolveNode(symbol.asVariable.type)
          node.resolvedType = symbol.asVariable.type.resolvedType
        }

        else if symbol.isFunction && !node.isCallTarget {
          _log.semanticErrorMustCallFunction(node.range, symbol.name)
        }

        else {
          node.resolvedType = symbol.resolvedType
        }

        # Make sure the extension is enabled if it hasn't been specified
        var name = symbol.requiredExtension
        if name != null && !(name in _generatedExtensions) && _data.extensionBehavior(name) == .DEFAULT {
          _generatedExtensions[name] = Node.createExtension(name, .ENABLE)
        }
      }

      case .SEQUENCE {
        for child = node.firstChild; child != null; child = child.nextSibling {
          _resolveAsExpression(child)
        }
        node.resolvedType = node.lastChild.resolvedType
      }

      default {
        if kind.isUnary { _resolveUnary(node) }
        else if kind.isBinary { _resolveBinary(node) }
        else { assert(false) }
      }
    }

    assert(node.resolvedType != null)
  }

  def _resolveBlockOrStatement(node Node) {
    assert(node.kind.isStatement)
    _controlFlow.pushBlock(node)

    if node.kind == .BLOCK {
      for child = node.firstChild; child != null; child = child.nextSibling {
        resolveNode(child)
        _controlFlow.visitStatement(child)
      }
    } else {
      resolveNode(node)
      _controlFlow.visitStatement(node)
    }

    _controlFlow.popBlock(node)
  }

  def _resolveUnary(node Node) {
    var value = node.unaryValue

    _resolveAsExpression(value)

    if node.kind.isUnaryAssign {
      _checkStorage(value)
    }

    var valueType = value.resolvedType

    switch node.kind {
      case .NEGATIVE, .POSITIVE, .PREFIX_DECREMENT, .PREFIX_INCREMENT, .POSTFIX_DECREMENT, .POSTFIX_INCREMENT {
        node.resolvedType =
          valueType.isIntOrFloat ? valueType :
          .ERROR
      }

      case .NOT {
        node.resolvedType =
          valueType == .BOOL ? .BOOL :
          .ERROR
      }
    }

    if node.resolvedType == .ERROR && valueType != .ERROR {
      _log.semanticErrorBadUnaryOperator(node.internalRange, node.internalRange.toString, valueType)
    }
  }

  def _resolveBinary(node Node) {
    var left = node.binaryLeft
    var right = node.binaryRight

    _resolveAsExpression(left)
    _resolveAsExpression(right)

    if node.kind.isBinaryAssign {
      _checkStorage(left)
    }

    var leftType = left.resolvedType
    var rightType = right.resolvedType
    var isSame = leftType == rightType

    switch node.kind {
      case .ADD, .SUBTRACT, .MULTIPLY, .DIVIDE {
        node.resolvedType =
          isSame && leftType.componentType != null ? leftType :

          leftType.hasFloatComponents && rightType == .FLOAT ? leftType :
          leftType.hasIntComponents && rightType == .INT ? leftType :

          leftType == .FLOAT && rightType.hasFloatComponents ? rightType :
          leftType == .INT && rightType.hasIntComponents ? rightType :

          node.kind == .MULTIPLY && (leftType == .VEC2 && rightType == .MAT2 || leftType == .MAT2 && rightType == .VEC2) ? .VEC2 :
          node.kind == .MULTIPLY && (leftType == .VEC3 && rightType == .MAT3 || leftType == .MAT3 && rightType == .VEC3) ? .VEC3 :
          node.kind == .MULTIPLY && (leftType == .VEC4 && rightType == .MAT4 || leftType == .MAT4 && rightType == .VEC4) ? .VEC4 :

          .ERROR
      }

      case .EQUAL, .NOT_EQUAL {
        node.resolvedType =
          isSame && leftType.canUseEqualityOperators ? .BOOL :
          .ERROR
      }

      case .LOGICAL_AND, .LOGICAL_OR, .LOGICAL_XOR {
        node.resolvedType =
          isSame && leftType == .BOOL ? .BOOL :
          .ERROR
      }

      case .LESS_THAN, .LESS_THAN_OR_EQUAL, .GREATER_THAN, .GREATER_THAN_OR_EQUAL {
        node.resolvedType =
          isSame && (leftType == .FLOAT || leftType == .INT) ? .BOOL :
          .ERROR
      }

      case .ASSIGN {
        node.resolvedType = leftType
        if leftType.containsArray {
          _log.semanticErrorArrayAssignment(node.internalRange, leftType)
        }
        checkConversion(right, leftType)
        return
      }

      case .ASSIGN_ADD, .ASSIGN_SUBTRACT, .ASSIGN_MULTIPLY, .ASSIGN_DIVIDE {
        node.resolvedType =
          isSame && leftType.componentType != null ? leftType :

          leftType.hasFloatComponents && rightType == .FLOAT ? leftType :
          leftType.hasIntComponents && rightType == .INT ? leftType :

          node.kind == .ASSIGN_MULTIPLY && (
            leftType == .VEC2 && rightType == .MAT2 ||
            leftType == .VEC3 && rightType == .MAT3 ||
            leftType == .VEC4 && rightType == .MAT4) ? leftType :

          .ERROR
      }

      case .INDEX {
        if rightType == .INT {
          var indexType = leftType.indexType
          if indexType != null {
            node.resolvedType = indexType
          }

          # Run bounds checking on the constant-folded value
          var folded = Folder.fold(right)
          if folded != null && folded.kind == .INT {
            var value = folded.asInt
            var count = leftType.indexCount

            # Negative indices are always invalid even if the array size is unknown
            if value < 0 || count != 0 && value >= count {
              _log.semanticErrorOutOfBoundsIndex(right.range, value, leftType)
            }
          }
        }
      }
    }

    # If we get here, show an error about an invalid operator
    if node.resolvedType == .ERROR && leftType != .ERROR && rightType != .ERROR {
      if node.kind == .INDEX {
        _log.semanticErrorBadIndex(node.internalRange, leftType, rightType)
      } else {
        _log.semanticErrorBadBinaryOperator(node.internalRange, node.internalRange.toString, leftType, rightType)
      }
    }
  }

  def _resolveCall(node Node) {
    var callTarget = node.callTarget
    resolveNode(callTarget)

    var type = callTarget.resolvedType
    var symbol = type.symbol
    var arguments List<Node> = []
    var hasError = false

    for child = callTarget.nextSibling; child != null; child = child.nextSibling {
      _resolveAsExpression(child)
      arguments.append(child)
      if child.resolvedType == .ERROR {
        hasError = true
      }
    }

    if hasError {
      return
    }

    if symbol != null {
      if symbol.isFunction {
        _resolveFunctionOverloads(symbol.asFunction, node, arguments)
        return
      }

      if symbol.isStruct {
        _resolveConstructor(type, node, arguments)
        return
      }
    }

    if type != .ERROR {
      _log.semanticErrorBadCall(callTarget.range, type)
    }
  }

  def _resolveDot(node Node) {
    var dotTarget = node.dotTarget
    var name = node.asString
    var range = node.internalRange
    _resolveAsExpression(dotTarget)

    if name == "" {
      # Ignore this case since the error was already reported
      return
    }

    var type = dotTarget.resolvedType
    var isAssignTarget = node.isAssignTarget
    switch type {
      case .BVEC2, .IVEC2, .VEC2, .BVEC3, .IVEC3, .VEC3, .BVEC4, .IVEC4, .VEC4 {
        node.resolvedType = _validateSwizzle(range, type, name, isAssignTarget)
      }

      case .ERROR {
        # Ignore this case since the error was already reported
      }

      default {
        if type.symbol != null && type.symbol.isStruct {
          for variable in type.symbol.asStruct.variables {
            if variable.name == name {
              node.symbol = variable
              resolveNode(variable.type)
              node.resolvedType = variable.type.resolvedType
              break
            }
          }
        }

        if node.symbol == null {
          _log.semanticErrorBadMember(range, type, name)
        }
      }
    }
  }

  def _resolveFunctionOverloads(overloaded FunctionSymbol, node Node, arguments List<Node>) {
    var overloads List<FunctionSymbol> = []

    # Collect all relevant overloads but ignore forward-declared functions that also have an implementation
    for overload = overloaded; overload != null; overload = overload.previousOverload {
      if !(overload.sibling in overloads) {
        overloads.append(overload)
      }
    }

    # Narrow down by argument count
    if overloads.count != 1 {
      overloads = overloads.clone
      overloads.removeIf(overload => overload.arguments.count != arguments.count)

      # Narrow down by argument types
      if overloads.count != 1 {
        var overloadsBeforeTypeFilter = overloads.clone
        overloads.removeIf(overload => {
          for i in 0..arguments.count {
            if overload.arguments[i].type.resolvedType != arguments[i].resolvedType {
              return true
            }
          }
          return false
        })

        # Narrow down by argument types with "conversions" to get better error messages
        if overloads.count != 1 {
          overloads = overloadsBeforeTypeFilter
          overloads.removeIf(overload => {
            for i in 0..arguments.count {
              var from = overload.arguments[i].type.resolvedType
              var to = arguments[i].resolvedType
              var fromSize = from.componentCount
              var toSize = to.componentCount
              if from != to && (fromSize == 0 || toSize == 0 || fromSize != toSize) {
                return true
              }
            }
            return false
          })
        }
      }
    }

    # Match failure
    if overloads.count != 1 {
      _log.semanticErrorBadOverloadMatch(node.callTarget.range, overloaded.name)
      return
    }

    # Match success
    var overload = overloads.first
    if overload.arguments.count != arguments.count {
      _log.semanticErrorArgumentCountFunction(node.internalRange, overload.arguments.count,
        arguments.count, overload.name, overload.range)
    } else {
      for i in 0..arguments.count {
        checkConversion(arguments[i], overload.arguments[i].type.resolvedType)
      }
    }
    node.callTarget.symbol = overload
    node.resolvedType = overload.returnType.resolvedType
  }

  def _resolveConstructor(type Type, node Node, arguments List<Node>) {
    node.resolvedType = type

    if type == .ERROR {
      return
    }

    if type.componentType != null {
      var count = type.componentCount
      var hasMatrixArgument = false

      # Visit each argument and make sure it's useful toward construction
      var providedCount = 0
      for argument in arguments {
        var argumentType = argument.resolvedType
        var deltaCount = argumentType.componentCount

        # Each type in a component-based types must be able to itself be unpacked into components
        if argumentType.componentType == null {
          if argumentType != .ERROR {
            _log.semanticErrorBadConstructorValue(argument.range, argumentType, type)
          }
          return
        }

        # Passing extra values to a constructor is allowed sometimes
        #
        # Allowed:
        #
        #   vec3(vec4(1.0));
        #   vec3(1.0, vec4(1.0));
        #
        # Not allowed:
        #
        #   vec3(vec4(1.0), 1.0);
        #   vec3(vec3(1.0), vec3(1.0));
        #
        if providedCount >= count {
          _log.semanticErrorExtraConstructorValue(argument.range, type, count, providedCount + deltaCount)
        }

        if argumentType.isMatrix {
          hasMatrixArgument = true
        }

        providedCount += deltaCount
      }

      # If a matrix argument is given to a matrix constructor, it is an error
      # to have any other arguments
      var isMatrixMatrixConstructor = type.isMatrix && hasMatrixArgument
      if isMatrixMatrixConstructor && arguments.count != 1 {
        _log.semanticErrorBadMatrixConstructor(node.internalRange)
      }

      # Validate the count (constructing a matrix using a matrix should always work)
      else if providedCount < count && providedCount != 1 && !isMatrixMatrixConstructor {
        _log.semanticErrorBadConstructorCount(node.internalRange, type, providedCount)
      }

      return
    }

    var symbol = type.symbol.asStruct
    var variables = symbol.variables
    var variableCount = variables.count
    var argumentCount = arguments.count

    # Validate argument count
    if variableCount != argumentCount {
      _log.semanticErrorArgumentCountConstructor(node.internalRange, variableCount, argumentCount, symbol.name, symbol.range)
      return
    }

    # Validate argument types
    for i in 0..variableCount {
      checkConversion(arguments[i], variables[i].type.resolvedType)
    }
  }

  def _validateSwizzle(range Range, type Type, name string, isAssignTarget bool) Type {
    var count = name.count
    if count < 1 || count > 4 {
      _log.semanticErrorBadSwizzle(range, type, name)
      return .ERROR
    }

    var componentCount = type.componentCount
    for set in Swizzle.strings(componentCount) {
      if name.get(0) in set {
        for i in 1..count {
          if !(name.get(i) in set) {
            _log.semanticErrorBadSwizzle(range, type, name)
            return .ERROR
          }
          if isAssignTarget && name.get(i) in name.slice(0, i) {
            _log.semanticErrorBadSwizzleAssignment(range.slice(i, i + 1), name.get(i))
            return .ERROR
          }
        }
        return Swizzle.type(type.componentType, count)
      }
    }

    _log.semanticErrorBadSwizzle(range, type, name)
    return .ERROR
  }

  def _resolveAsExpression(node Node) {
    resolveNode(node)
    if node.kind == .TYPE && node.resolvedType != .ERROR {
      _log.semanticErrorUnexpectedType(node.range, node.resolvedType)
      node.resolvedType = .ERROR
    }
  }

  def _resolveChildren(node Node) {
    for child = node.firstChild; child != null; child = child.nextSibling {
      resolveNode(child)
    }
  }

  def _checkStorage(node Node) {
    var n = node
    assert(node.kind.isExpression)

    while true {
      if n.resolvedType == .ERROR {
        break
      }

      switch n.kind {
        case .NAME {
          if n.symbol.isConst || n.symbol.isUniform {
            _log.semanticErrorBadStorage(node.range)
          }
          break
        }

        case .DOT {
          n = n.dotTarget
        }

        case .INDEX {
          n = n.binaryLeft
        }

        default {
          _log.semanticErrorBadStorage(node.range)
          break
        }
      }
    }
  }

  def checkConversion(node Node, type Type) {
    if node.resolvedType != type && node.resolvedType != .ERROR && type != .ERROR {
      _log.semanticErrorBadConversion(node.range, node.resolvedType, type)
    }
  }
}
