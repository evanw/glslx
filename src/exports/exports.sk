@import {
  const console dynamic
  const exports dynamic
  const module dynamic
  const process dynamic
  const require dynamic
  const window dynamic
}

namespace GLSLX.Exports {
  const outputFormats StringMap<OutputFormat> = {
    "json": .JSON,
    "js": .JS,
    "c++": .CPP,
    "skew": .SKEW,
    "rust": .RUST,
  }

  const renameSymbols StringMap<RenameSymbols> = {
    "all": .ALL,
    "internal-only": .INTERNAL_ONLY,
    "none": .NONE,
  }

  def printUsage {
    console.log("
Usage: glslx [sources] [flags]

  --output=PATH
    Set the path to the output file. Defaults to standard out.

  --format=FORMAT
    Set the output format, must be json, js, c++, skew or rust. Defaults to json.

Advanced:

  --disable-rewriting
    Disable syntax tree rewriting, useful to check for driver bugs.

  --pretty-print
    Format the output nicely instead of minifying it.

  --renaming=MODE
    Valid modes are all, internal-only, or none. Defaults to all.

  --ignored-symbols=SYMBOLS
    A list of symbols to be ignored during renaming. Formatted as a JSON array. Defaults to an empty array.

  --keep-symbols
    Don't inline constants or remove unused symbols.
")
  }

  def printWithColor(color Terminal.Color, text string) {
    Terminal.setColor(color)
    Terminal.write(text)
    Terminal.setColor(.DEFAULT)
  }

  def printError(text string) {
    printWithColor(.RED, "error: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printNote(text string) {
    printWithColor(.GRAY, "note: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printWarning(text string) {
    printWithColor(.MAGENTA, "warning: ")
    printWithColor(.BOLD, text + "\n")
  }

  def printLogWithColor(log Log) {
    var terminalWidth = Terminal.width

    for diagnostic in log.diagnostics {
      if diagnostic.range != null {
        printWithColor(.BOLD, diagnostic.range.locationString + ": ")
      }
      switch diagnostic.kind {
        case .WARNING {
          printWarning(diagnostic.text)
        }
        case .ERROR {
          printError(diagnostic.text)
        }
      }
      if diagnostic.range != null {
        var formatted = diagnostic.range.format(terminalWidth)
        printWithColor(.GRAY, formatted.line + "\n")
        printWithColor(.GREEN, formatted.range + "\n")
      }
      if diagnostic.noteRange != null {
        printWithColor(.BOLD, diagnostic.noteRange.locationString + ": ")
        printNote(diagnostic.noteText)
        var formatted = diagnostic.noteRange.format(terminalWidth)
        printWithColor(.GRAY, formatted.line + "\n")
        printWithColor(.GREEN, formatted.range + "\n")
      }
    }

    # Print the summary
    var hasErrors = log.hasErrors
    var hasWarnings = log.hasWarnings
    var summary = ""
    if hasWarnings {
      summary += "\(log.warningCount) warning\(Log.plural(log.warningCount))"
      if hasErrors {
        summary += " and "
      }
    }
    if hasErrors {
      summary += "\(log.errorCount) error\(Log.plural(log.errorCount))"
    }
    if hasWarnings || hasErrors {
      Terminal.print(summary + " generated")
    }
  }

  def sourcesFromInput(input dynamic) List<Source> {
    if input is string {
      return [Source.new("<stdin>", input)]
    }

    if input is List<dynamic> {
      var sources List<Source> = []
      for i in 0..input.length {
        const item = input[i]
        sources.append(Source.new(item.name as string, item.contents as string))
      }
      return sources
    }

    return [Source.new(input.name as string, input.contents as string)]
  }

  const rangeToJSON = (range Range) dynamic => {
    if range == null {
      return null
    }

    var source = range.source
    var start = source.indexToLineColumn(range.start)
    var end = source.indexToLineColumn(range.end)

    return {
      "source": source.name,
      "start": {
        "line": start.line,
        "column": start.column,
      },
      "end": {
        "line": end.line,
        "column": end.column,
      },
    }
  }

  # Do a non-interactive compile
  const compile = (input dynamic, args dynamic) dynamic => {
    args = args || ({} as dynamic)
    var sources = sourcesFromInput(input)
    var log = Log.new
    var options = CompilerOptions.new

    options.renameSymbols = renameSymbols.get(args.renaming, .ALL)
    if args.disableRewriting { options.compactSyntaxTree = false }
    if args.prettyPrint { options.removeWhitespace = false }
    if args.keepSymbols { options.trimSymbols = false }
    if args.ignoredSymbols { options.ignoredSymbols = args.ignoredSymbols }
    if args.fileAccess { options.fileAccess = wrapFileAccess(args.fileAccess) }

    var result = Compiler.compile(log, sources, options)
    return {
      "log": log.toString,
      "output": result != null ? result.output(outputFormats.get(args.format, .JSON)) : null,
    }
  }

  # Do a compile that can have queries done on it later
  const compileIDE = (input dynamic, args dynamic) dynamic => {
    args = args || ({} as dynamic)
    var sources = sourcesFromInput(input)
    var log = Log.new
    var options = CompilerOptions.new
    if args.fileAccess { options.fileAccess = wrapFileAccess(args.fileAccess) }
    var result = Compiler.typeCheck(log, sources, options)

    var handleTooltipQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var ignoreDiagnostics bool = !!message.ignoreDiagnostics
      var range Range = null
      var tooltip IDE.Tooltip = null
      var symbol string = null

      for source in sources {
        if source.name == name {
          var index = source.lineColumnToIndex(line, column)
          if index != -1 {
            # Search diagnostics first
            if !ignoreDiagnostics && log != null {
              for diagnostic in log.diagnostics {
                if diagnostic.range != null && diagnostic.range.source == source && diagnostic.range.touches(index) {
                  tooltip = IDE.Tooltip.new(diagnostic.text, "")
                  range = diagnostic.range
                  break
                }
              }
            }

            # Search the syntax tree next
            if tooltip == null && result != null {
              var query = IDE.SymbolQuery.new(source, index)
              query.run(result.global)
              tooltip = query.generateTooltip
              if tooltip != null {
                range = query.range
                symbol = query.symbol?.name
              }
            }
          }
          break
        }
      }

      return {
        "tooltip": tooltip?.code,
        "range": rangeToJSON(range),
        "symbol": symbol,
        "documentation": tooltip?.documentation,
      }
    }

    var handleDefinitionQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var range Range = null
      var definition Range = null
      var symbol string = null

      # Allow go-to-definition on #include statements
      for include in result.includes {
        if include.originalRange.source.name == name {
          var index = include.originalRange.source.lineColumnToIndex(line, column)
          if index != -1 && include.originalRange.touches(index) {
            return {
              "definition": rangeToJSON(include.includedRange),
              "range": rangeToJSON(include.originalRange),
              "symbol": include.includedRange.source.name,
            }
          }
        }
      }

      for source in sources {
        if source.name == name {
          var index = source.lineColumnToIndex(line, column)
          if index != -1 && result != null {
            var query = IDE.SymbolQuery.new(source, index)
            query.run(result.global)
            if query.symbol != null && query.symbol.range != null && query.symbol.range.source.name != API_NAME {
              definition = query.symbol.range
              range = query.range
              symbol = query.symbol.name
            }
          }
          break
        }
      }

      return {
        "definition": rangeToJSON(definition),
        "range": rangeToJSON(range),
        "symbol": symbol,
      }
    }

    var handleSymbolsQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var symbols List<dynamic> = null

      for source in sources {
        if source.name == name {
          if result != null {
            var query = IDE.SymbolsQuery.new(source)
            query.run(result.global)
            symbols = query.symbols.map<dynamic>(symbol => {
              return {
                "name": symbol.name,
                "kind":
                  symbol.isVariable ? "variable" :
                  symbol.isFunction ? "function" :
                  symbol.isStruct ? "struct" :
                  null,
                "range": rangeToJSON(symbol.range),
              }
            })
          }
          break
        }
      }

      return {
        "symbols": symbols,
      }
    }

    var handleRenameQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var ranges List<dynamic> = null
      var symbol string = null

      for source in sources {
        if source.name == name {
          var index = source.lineColumnToIndex(line, column)
          if index != -1 && result != null {
            var renameQuery = IDE.RenameQuery.new(source, index)
            renameQuery.run(result.global)
            if renameQuery.symbol != null && renameQuery.symbol.range != null && renameQuery.symbol.range.source.name != API_NAME {
              ranges = renameQuery.ranges.map<dynamic>(rangeToJSON)
              symbol = renameQuery.symbol.name
            }
          }
          break
        }
      }

      return {
        "ranges": ranges,
        "symbol": symbol,
      }
    }

    var handleCompletionQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var completions List<dynamic> = []

      for source in sources {
        if source.name == name {
          var index = source.lineColumnToIndex(line, column)
          if index != -1 && result != null {
            var completionQuery = IDE.CompletionQuery.new(source, index)
            completionQuery.run(result.global)
            completions = completionQuery.completions.map<dynamic>(completion => ({
              "kind": completion.kind,
              "name": completion.name,
              "detail": completion.detail,
              "documentation": completion.documentation,
            }))
          }
        }
      }

      return {
        "completions": completions,
      }
    }

    var handleSignatureQuery = (message dynamic) dynamic => {
      var name string = message.source + ""
      var line int = message.line | 0
      var column int = message.column | 0
      var signatures List<dynamic> = []
      var activeArgument = -1
      var activeSignature = -1

      for source in sources {
        if source.name == name {
          var index = source.lineColumnToIndex(line, column)
          if index != -1 && result != null {
            var signatureQuery = IDE.SignatureQuery.new(source, index)
            signatureQuery.run(result.global)
            activeArgument = signatureQuery.activeArgument
            activeSignature = signatureQuery.activeSignature
            signatures = signatureQuery.signatures.map<dynamic>(signature => ({
              "text": signature.text,
              "arguments": signature.arguments,
              "documentation": signature.documentation,
            }))
          }
        }
      }

      return {
        "signatures": signatures,
        "activeArgument": activeArgument,
        "activeSignature": activeSignature,
      }
    }

    return {
      "unusedSymbols": log.unusedSymbols.map<dynamic>(symbol => ({
        "name": symbol.name,
        "range": rangeToJSON(symbol.range),
      })),
      "diagnostics": log.diagnostics.map<dynamic>(diagnostic => ({
        "kind": diagnostic.kind.toString.toLowerCase,
        "range": rangeToJSON(diagnostic.range),
        "text": diagnostic.text,
      })),
      "tooltipQuery": handleTooltipQuery,
      "definitionQuery": handleDefinitionQuery,
      "symbolsQuery": handleSymbolsQuery,
      "renameQuery": handleRenameQuery,
      "completionQuery": handleCompletionQuery,
      "signatureQuery": handleSignatureQuery,
    }
  }

  # Source code formatting
  const format = (input dynamic, options dynamic) string => {
    options = options || ({} as dynamic)
    var indent = "indent" in options ? options.indent as string : "  "
    var newline = "newline" in options ? options.newline as string : "\n"
    var trailingNewline = Formatter.TrailingNewline.INSERT
    if "trailingNewline" in options {
      var value = options.trailingNewline as string
      switch value {
        case "preserve" { trailingNewline = .PRESERVE }
        case "remove" { trailingNewline = .REMOVE }
        case "insert" { trailingNewline = .INSERT }
        default { throw dynamic.Error.new("Invalid \"trailingNewline\" value: \(value)") }
      }
    }
    return Formatter.format(input as string, indent, newline, trailingNewline)
  }

  def wrapFileAccess(callback dynamic) fn(string, string) Source {
    return (filePath, relativeTo) => {
      var result = callback(filePath, relativeTo)

      if result is string {
        return Source.new(filePath, result)
      }

      if !result {
        return null
      }

      var name = result.name
      var contents = result.contents

      if name is string && contents is string {
        return Source.new(name, contents)
      }

      throw dynamic.Error.new("Invalid file access result")
    }
  }

  def commandLineMain {
    var args List<string> = process.argv.slice(2)
    var options = CompilerOptions.new
    var sources List<Source> = []
    var outputFormat = OutputFormat.JSON
    var outputPath string = null
    var fs = require("fs")
    var path = require("path")

    options.fileAccess = (filePath, relativeTo) => {
      var name = path.resolve(path.dirname(relativeTo), filePath)
      try { return Source.new(name, fs.readFileSync(name, "utf8")) }
      return null
    }

    for arg in args {
      if !arg.startsWith("-") {
        sources.append(Source.new(path.resolve(arg), fs.readFileSync(arg, "utf8")))
        continue
      }

      switch arg {
        case "--disable-rewriting" {
          options.compactSyntaxTree = false
        }

        case "--pretty-print" {
          options.removeWhitespace = false
        }

        case "--keep-symbols" {
          options.trimSymbols = false
        }

        case "--help", "-h" {
          printUsage
          return
        }

        default {
          if arg.startsWith("--output=") {
            outputPath = arg.slice("--output=".count)
          }

          else if arg.startsWith("--format=") {
            var text = arg.slice("--format=".count)
            if !(text in outputFormats) {
              console.log("invalid output format \"\(text)\"")
              process.exit(1)
            }
            outputFormat = outputFormats[text]
          }

          else if arg.startsWith("--renaming=") {
            var text = arg.slice("--renaming=".count)
            if !(text in renameSymbols) {
              console.log("invalid symbol renaming mode \"\(text)\"")
              process.exit(1)
            }
            options.renameSymbols = renameSymbols[text]
          }

          else if arg.startsWith("--ignored-symbols=") {
            options.ignoredSymbols = dynamic.JSON.parse(arg.slice("--ignored-symbols=".count))
          }

          else {
            console.log("invalid flag \"\(arg)\"")
            process.exit(1)
          }
        }
      }
    }

    if sources.isEmpty {
      printUsage
      return
    }

    var log = Log.new
    var result = Compiler.compile(log, sources, options)

    if result != null {
      if outputPath != null {
        fs.writeFileSync(outputPath, result.output(outputFormat))
        printLogWithColor(log)
      } else {
        process.stdout.write(result.output(outputFormat))
      }
    } else {
      printLogWithColor(log)
      process.exit(1)
    }
  }

  @entry
  def main {
    var this = (=> dynamic.this)()
    var root = dynamic.typeof(exports) != "undefined" ? exports : (this.GLSLX = {})

    # API exports
    root.compile = compile
    root.compileIDE = compileIDE
    root.format = format

    # Also include a small command-line utility for when this is run in node
    if dynamic.typeof(require) != "undefined" && dynamic.typeof(module) != "undefined" && require.main == module {
      commandLineMain
    }
  }
}
