namespace GLSLX.Tests {
  def testRewriter {

# Prefer greater than and less than operators when integer constants can be modified
test("
int main(int i) {
  return i <= -1 ? -1 : i >= 1 ? 1 : 0;
}
", "
int main(int i) {
  return i < 0 ? -1 : i > 0 ? 1 : 0;
}
").compactSyntaxTree

# Don't touch greater than and less than operators for floating-point constants
test("
int main(float i) {
  return i <= -1.0 ? -1 : i >= 1.0 ? 1 : 0;
}
", "
int main(float i) {
  return i <= -1.0 ? -1 : i >= 1.0 ? 1 : 0;
}
").compactSyntaxTree

# Inline blocks when they don't contain variables
test("
void bar();

void main() {
  ;
  {}
  {
    int foo = 0;
  }
  {
    bar();
    bar();
  }
  {{{
    int foo = 0;
  }}}
}
", "
void bar();

void main() {
  {
    int foo = 0;
  }
  bar(), bar();
  {
    int foo = 0;
  }
}
").compactSyntaxTree

# Check for dangling else issue
test("
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    if (b)
      foo();
  }
  else
    bar();
}
", "
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    if (b)
      foo();
  }
  else
    bar();
}
").compactSyntaxTree

# Check for dangling else issue
test("
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    for (;;) if (b) foo();
  }
  else bar();
}
", "
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    for (;;)
      if (b)
        foo();
  }
  else
    bar();
}
").compactSyntaxTree

# Check for dangling else issue
test("
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    for (;;) {
      if (b) foo();
    }
  }
  else bar();
}
", "
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    for (;;)
      if (b)
        foo();
  }
  else
    bar();
}
").compactSyntaxTree

# Check for lack of dangling else issue
test("
void foo();
void bar();

void main(bool a, bool b) {
  if (a) {
    for (;;) {
      if (b) foo();
      else return;
    }
  }
  else bar();
}
", "
void foo();
void bar();

void main(bool a, bool b) {
  if (a)
    for (;;)
      if (b)
        foo();
      else
        return;
  else
    bar();
}
").compactSyntaxTree

# Check for hook substitution
test("
void foo();
void bar();

void main(bool a) {
  if (a) foo();
  else bar();
}
", "
void foo();
void bar();

void main(bool a) {
  a ? foo() : bar();
}
").compactSyntaxTree

# Check for hook substitution
test("
int main(int i) {
  int j = 0;
  if (i < 0) j = -1;
  else if (i > 0) j = 1;
  return j;
}
", "
int main(int i) {
  int j = 0;
  j = i < 0 ? -1 : i > 0 ? 1 : j;
  return j;
}
").compactSyntaxTree

# Check for hook substitution
test("
float main(float i) {
  float j = 0.0;
  if (i < 0.0) j = -1.0;
  else if (i > 0.0) j = 1.0;
  return j;
}
", "
float main(float i) {
  float j = 0.0;
  j = i < 0.0 ? -1.0 : i > 0.0 ? 1.0 : j;
  return j;
}
").compactSyntaxTree

# Check for hook substitution
test("
vec4 main(int i) {
  vec4 j = vec4(0.0);
  if (i < 0) j = vec4(-1.0);
  else if (i > 0) j = vec4(1.0);
  return j;
}
", "
vec4 main(int i) {
  vec4 j = vec4(0);
  j = i < 0 ? vec4(-1) : i > 0 ? vec4(1) : j;
  return j;
}
").compactSyntaxTree

# Check for sequence flattening
test("
void foo();
void bar();

void main() {
  (foo(), bar()), (foo(), bar());
}
", "
void foo();
void bar();

void main() {
  foo(), bar(), foo(), bar();
}
").compactSyntaxTree

# Change while loops into for loops
test("
void main(bool b) {
  while (b) ;
}
", "
void main(bool b) {
  for (; b;) ;
}
").compactSyntaxTree

# Change while loops into for loops
test("
void main() {
  while (true) ;
}
", "
void main() {
  for (;;) ;
}
").compactSyntaxTree

# Combine multiple adjacent variable declarations
test("
varying vec2 s;
uniform vec2 x;
uniform vec2 y;
varying vec2 t;

void main() {
  int a;
  int b;
  const int c = 0;
  int d;
  int e;
}
", "
uniform vec2 x, y;
varying vec2 s, t;

void main() {
  const int c = 0;
  int a, b, d, e;
}
").compactSyntaxTree

# Only combine multiple adjacent variable declarations across an initialized constant
test("
int foo();

void main() {
  int a = foo();
  const int b = 0;
  int c;
}
", "
int foo();

void main() {
  const int b = 0;
  int a = foo(), c;
}
").compactSyntaxTree

# Rewrite hook expressions with a common binary left side
test("
int main(bool b) {
  int i;
  b ? i = 0 : i = 1;
  return i;
}
", "
int main(bool b) {
  int i;
  i = b ? 0 : 1;
  return i;
}
").compactSyntaxTree

# Check constant folding of booleans
test("
void foo();
void bar();

void main(bool a) {
  if (!false) foo(); else bar();
  if (!true) foo(); else bar();
  if (!!a) foo();
}
", "
void foo();
void bar();

void main(bool a) {
  foo(), bar();
  if (a)
    foo();
}
").compactSyntaxTree

# Check constant folding of integers
test("
void foo();

void main(int a) {
  if (+ +a < 0) foo();
  if (- -a < 0) foo();
  if (- -1 == 1) foo();
}
", "
void foo();

void main(int a) {
  if (a < 0)
    foo();
  if (a < 0)
    foo();
  foo();
}
").compactSyntaxTree

# Check for index substitution
test("
float main(vec4 a, int i) {
  return a[0] + a[1] + a[2] + a[3] + a[i];
}
", "
float main(vec4 a, int i) {
  return a.x + a.y + a.z + a.w + a[i];
}
").compactSyntaxTree

# Check for constant folding based on syntax tree comparisons
test("
int foo();

bool main(int i) {
  return 0 - i == -i && foo() == foo();
}
", "
int foo();

bool main(int i) {
  return foo() == foo();
}
").compactSyntaxTree

# Check for unused variable removal
test("
int foo(int a) {
  int b = a;
  return a + b;
}

int main(int i) {
  int j = i;
  return i + foo(i);
}
", "
int foo(int a) {
  int b = a;
  return a + b;
}

int main(int i) {
  return i + foo(i);
}
").trimSymbols

# Don't remove unused variables when the initializer has side effects
test("
int foo();

int main(int i) {
  int j = foo();
  return i;
}
", "
int foo();

int main(int i) {
  int j = foo();
  return i;
}
").trimSymbols

# Compact if statements into a single return statement
test("
int main(bool b) {
  if (b) return 1;
  else return 2;
}
", "
int main(bool b) {
  return b ? 1 : 2;
}
").compactSyntaxTree

# Compact if statements into a single return statement
test("
int main(int i) {
  if (i < 0) return -1;
  if (i > 0) return 1;
  return 0;
}
", "
int main(int i) {
  return i < 0 ? -1 : i > 0 ? 1 : 0;
}
").compactSyntaxTree

# Remove dead code after jumps
test("
void foo();

int main(bool b) {
  while (b) { break; foo(); }
  while (b) { continue; foo(); }
  if (b) { discard; foo(); }
  return 0; foo();
}
", "
void foo();

int main(bool b) {
  for (; b;)
    break;
  for (; b;) ;
  if (b)
    discard;
  return 0;
}
").compactSyntaxTree

# Check that for statements can absorb the previous expression into the setup area
test("
void main(int i) {
  i = 0;
  while (i < 10) {
    i++;
  }
}
", "
void main(int i) {
  for (i = 0; i < 10;)
    i++;
}
").compactSyntaxTree

# Check that calling forward-declared functions works
test("
void foo();
export void bar() { foo(); }
void foo() { bar(); }
", "
void a();

void main() {
  a();
}

void a() {
  main();
}
").renameAll.trimSymbols

# Check that calling forward-declared functions works
test("
void foo();
void bar() { foo(); }
export void foo() { bar(); }
", "
void main();

void a() {
  main();
}

void main() {
  a();
}
").renameAll.trimSymbols

# Check for renaming locals
test("
export void foo() {
  vec4 bar = gl_FragCoord;
  gl_FragColor = bar;
}
", "
void main() {
  vec4 a = gl_FragCoord;
  gl_FragColor = a;
}
").renameAll.trimSymbols

# Test implicit extensions
test("
export void foo() {
  gl_FragColor = dFdx(gl_FragCoord);
}

export void bar() {
  gl_FragColor = gl_FragCoord;
}
", "
[foo]
#extension GL_OES_standard_derivatives : enable

void main() {
  gl_FragColor = dFdx(gl_FragCoord);
}

[bar]
void main() {
  gl_FragColor = gl_FragCoord;
}
").renameAll.trimSymbols

# There was previously a crash in this case where we would
# remove the true-branch of the if-statement leading to an
# invalid AST
test("
bool func(); // This function might run important code

export void test() {
  if (func())
    float thing = 1.0; // Unused, so it will be removed
}
", "
bool func();

void main() {
  func();
}
").trimSymbols.compactSyntaxTree

# Test explicit extensions
test("
#extension GL_OES_standard_derivatives : enable

export void foo() {
  gl_FragColor = dFdx(gl_FragCoord);
}

export void bar() {
  gl_FragColor = gl_FragCoord;
}
", "
[foo]
#extension GL_OES_standard_derivatives : enable

void main() {
  gl_FragColor = dFdx(gl_FragCoord);
}

[bar]
#extension GL_OES_standard_derivatives : enable

void main() {
  gl_FragColor = gl_FragCoord;
}
").renameAll.trimSymbols

# Don't merge variables with different flags
test("
void main() {
  lowp float x;
  lowp float y;
  lowp float z;
  lowp float l;
  mediump float m;
  highp float h;
}
", "
void main() {
  lowp float x, y, z, l;
  mediump float m;
  highp float h;
}
").compactSyntaxTree

# Test weird struct-variable combo syntax
test("
int main() {
  struct S {
    int x;
  } y;

  struct T {
    int a;
  } b;

  b.a = 2;
  return b.a;
}
", "
int main() {
  struct c {
    int d;
  };
  struct e {
    int a;
  } b;
  b.a = 2;
  return b.a;
}
").compactSyntaxTree.renameAll.trimSymbols

# Test weird struct-variable combo syntax
test("
int main() {
  struct S {
    int x;
  } y;

  struct T {
    int a;
  } b;

  return S(0).x + T(1).a;
}
", "
int main() {
  struct c {
    int a;
  };
  struct d {
    int b;
  };
  return c(0).a + d(1).b;
}
").compactSyntaxTree.renameAll.trimSymbols

# Test collapsing hook expressions
test("
export float main(bool b, float f[2]) {
  return b ? f[0] : f[1];
}
", "
float main(bool b, float f[2]) {
  return b ? f[0] : f[1];
}
").compactSyntaxTree

# Test inlining constants into variable definitions
test("
export int main() {
  int a = 1;
  int b = a;
  return b;
}
", "
int main() {
  return 1;
}
").trimSymbols

# Test removing for loop initializers
test("
export void main() {
  int i = 0;
  for (int n = 1; i < n; i++) {
  }
}
", "
void main() {
  int i = 0;
  for (; i < 1; i++) ;
}
").trimSymbols

# Test folding casted primitive types
test("
export float vertex() {
  const float g = 1.0 + 2.0;
  const float f = float(3);
  return f + g;
}
", "
float main() {
  return 3.0 + 3.0;
}
").trimSymbols

# Test folding casted primitive types with compaction
test("
export float vertex() {
  const float g = 1.0 + 2.0;
  const float f = float(3);
  return f + g;
}
", "
float main() {
  return 6.0;
}
").trimSymbols.compactSyntaxTree

# Test folding casted non-primitive types
test("
export vec2 vertex() {
  const vec2 g = vec2(1) + vec2(2);
  const vec2 f = vec2(3);
  return f + g;
}
", "
vec2 main() {
  const vec2 g = vec2(1) + vec2(2);
  const vec2 f = vec2(3);
  return f + g;
}
").trimSymbols

# Test removing global constants in array count position
test("
const int COUNT = 100;
uniform float data[COUNT];

export void pixelShader() {
  float sum;
  for (int i = 0; i < COUNT; i++)
    sum += data[i];
  gl_FragColor = vec4(sum, data[0], 0.0, float(COUNT));
}
", "
uniform float data[100];

void main() {
  float sum;
  for (int i = 0; i < 100; i++)
    sum += data[i];
  gl_FragColor = vec4(sum, data[0], 0.0, float(100));
}
").trimSymbols

# Test keeping used global constants
test("
const vec4 someConst = vec4(3.0);

export void vertex() {
  gl_Position = someConst;
}

export void colorFragment() {
  gl_FragColor = someConst;
}
", "
[vertex]
const vec4 someConst = vec4(3.0);

void main() {
  gl_Position = someConst;
}

[colorFragment]
const vec4 someConst = vec4(3.0);

void main() {
  gl_FragColor = someConst;
}
").trimSymbols

# Test used and unused global constants
test("
const vec4 someConst = vec4(3.0);

export void vertex() {
  gl_Position = someConst;
}

export void colorFragment() {
  gl_FragColor = vec4(0.0);
}
", "
[vertex]
const vec4 someConst = vec4(3.0);

void main() {
  gl_Position = someConst;
}

[colorFragment]
void main() {
  gl_FragColor = vec4(0.0);
}
").trimSymbols

# Test removing unused global constants
test("
const vec4 someConst = vec4(3.0);

export void vertex() {
  gl_Position = vec4(0.0);
}

export void colorFragment() {
  gl_FragColor = vec4(0.0);
}
", "
[vertex]
void main() {
  gl_Position = vec4(0.0);
}

[colorFragment]
void main() {
  gl_FragColor = vec4(0.0);
}
").trimSymbols

# Do not inline variables used as "inout" parameters
test("
void foo(inout float param, float inc) {
  param += inc;
}

export void fragment() {
  float depth = 1.0;
  float inc = 0.5;
  vec2 before = vec2(depth, inc);
  foo(depth, inc);
  vec2 after = vec2(depth, inc);
  gl_FragColor = vec4(before, after);
}
", "
void foo(inout float param, float inc) {
  param += inc;
}

void main() {
  float depth = 1.0;
  vec2 before = vec2(depth, 0.5);
  foo(depth, 0.5);
  vec2 after = vec2(depth, 0.5);
  gl_FragColor = vec4(before, after);
}
").trimSymbols

# Fold casts of integers to "float"
test("
export void vertex() {
  gl_FragColor.x = 1.0 + 2.0 + float(3);
}
", "
void main() {
  gl_FragColor.x = 6.0;
}
").compactSyntaxTree

# Convert floats to integers inside constructors
test("
vec2 test(float a, float b, float c, float d) {
  return vec2(a + b, c - d);
}

export void vertex() {
  vec4 a = vec4(-1.0, 2.0, 0.5, -3.00001);
  mat2 b = mat2(-1.0, 2.0, 0.5, -3.00001);
  vec2 c = test(-1.0, 2.0, 0.5, -3.00001);
}
", "
vec2 test(float a, float b, float c, float d) {
  return vec2(a + b, c - d);
}

void main() {
  vec4 a = vec4(-1, 2, 0.5, -3.00001);
  mat2 b = mat2(-1, 2, 0.5, -3.00001);
  vec2 c = test(-1.0, 2.0, 0.5, -3.00001);
}
").compactSyntaxTree

  }
}
