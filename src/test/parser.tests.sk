namespace GLSLX.Tests {
  def testParser {

# Test constant parsing
test("
void main() {
  int i1 = 0x123;
  int i2 = 0X123;
  int i3 = 0123;

  float f1 = .0;
  float f2 = 0.;
  float f3 = 1e2;
  float f4 = 1e-2;
  float f5 = 1.e2;
  float f6 = .1e-2;
  float f7 = 010.5;
}
", "
void main() {
  int i1 = 291;
  int i2 = 291;
  int i3 = 83;
  float f1 = 0.0;
  float f2 = 0.0;
  float f3 = 100.0;
  float f4 = 0.01;
  float f5 = 100.0;
  float f6 = 1e-3;
  float f7 = 10.5;
}
")

# Test invalid operators
test("
void main() {
  int a = ~1;
  int b = 1 << 2;
  int c = 1 >> 2;
  int d = 1 | 2;
  int e = 1 & 2;
  int f = 1 ^ 2;
  int g = 1 % 2;

  b <<= 3;
  c >>= 3;
  d |= 3;
  e &= 3;
  f ^= 3;
  g %= 3;
}
", "
<stdin>:2:11: error: The operator \"~\" is reserved and cannot be used
  int a = ~1;
          ^
<stdin>:3:13: error: The operator \"<<\" is reserved and cannot be used
  int b = 1 << 2;
            ~~
<stdin>:4:13: error: The operator \">>\" is reserved and cannot be used
  int c = 1 >> 2;
            ~~
<stdin>:5:13: error: The operator \"|\" is reserved and cannot be used
  int d = 1 | 2;
            ^
<stdin>:6:13: error: The operator \"&\" is reserved and cannot be used
  int e = 1 & 2;
            ^
<stdin>:7:13: error: The operator \"^\" is reserved and cannot be used
  int f = 1 ^ 2;
            ^
<stdin>:8:13: error: The operator \"%\" is reserved and cannot be used
  int g = 1 % 2;
            ^
<stdin>:10:5: error: The operator \"<<=\" is reserved and cannot be used
  b <<= 3;
    ~~~
<stdin>:11:5: error: The operator \">>=\" is reserved and cannot be used
  c >>= 3;
    ~~~
<stdin>:12:5: error: The operator \"|=\" is reserved and cannot be used
  d |= 3;
    ~~
<stdin>:13:5: error: The operator \"&=\" is reserved and cannot be used
  e &= 3;
    ~~
<stdin>:14:5: error: The operator \"^=\" is reserved and cannot be used
  f ^= 3;
    ~~
<stdin>:15:5: error: The operator \"%=\" is reserved and cannot be used
  g %= 3;
    ~~
")

# Test comment parsing
test("
// this is a comment
varying vec2 v2;
/*
this is a multi-
line comment
*/
void main() {
  gl_FragColor.xy = v2;
}
", "
varying vec2 v2;

void main() {
  gl_FragColor.xy = v2;
}
")

# Test comment parsing
test("
// this is a comment\r
varying vec2 v2;\r
/*\r
this is a multi-\r
line comment\r
*/\r
void main() {\r
  gl_FragColor.xy = v2;\r
}\r
", "
varying vec2 v2;

void main() {
  gl_FragColor.xy = v2;
}
")

# Test qualifier parsing for arguments
test("
void main(
  attribute float a,
  const float c,
  highp float h,
  in float i,
  inout float io,
  lowp float l,
  mediump float m,
  out float o,
  uniform float u,
  varying float v
) {
}
", "
<stdin>:2:3: error: Cannot use this qualifier here
  attribute float a,
  ~~~~~~~~~
<stdin>:10:3: error: Cannot use this qualifier here
  uniform float u,
  ~~~~~~~
<stdin>:11:3: error: Cannot use this qualifier here
  varying float v
  ~~~~~~~
")

# Test qualifier parsing for global variables
test("
attribute float a;
const float c;
highp float h;
in float i;
inout float io;
lowp float l;
mediump float m;
out float o;
uniform float u;
varying float v;
", "
<stdin>:4:1: error: Cannot use this qualifier here
in float i;
~~
<stdin>:5:1: error: Cannot use this qualifier here
inout float io;
~~~~~
<stdin>:8:1: error: Cannot use this qualifier here
out float o;
~~~
")

# Test qualifier parsing for struct fields
test("
struct Foo {
  attribute float a;
  const float c;
  highp float h;
  in float i;
  inout float io;
  lowp float l;
  mediump float m;
  out float o;
  uniform float u;
  varying float v;
};
", "
<stdin>:2:3: error: Cannot use this qualifier here
  attribute float a;
  ~~~~~~~~~
<stdin>:3:3: error: Cannot use this qualifier here
  const float c;
  ~~~~~
<stdin>:5:3: error: Cannot use this qualifier here
  in float i;
  ~~
<stdin>:6:3: error: Cannot use this qualifier here
  inout float io;
  ~~~~~
<stdin>:9:3: error: Cannot use this qualifier here
  out float o;
  ~~~
<stdin>:10:3: error: Cannot use this qualifier here
  uniform float u;
  ~~~~~~~
<stdin>:11:3: error: Cannot use this qualifier here
  varying float v;
  ~~~~~~~
")

# Test qualifier parsing for local variables
test("
void main() {
  attribute float a;
  const float c = 0.0;
  highp float h;
  in float i;
  inout float io;
  lowp float l;
  mediump float m;
  out float o;
  uniform float u;
  varying float v;
}
", "
<stdin>:5:3: error: Cannot use this qualifier here
  in float i;
  ~~
<stdin>:6:3: error: Cannot use this qualifier here
  inout float io;
  ~~~~~
<stdin>:9:3: error: Cannot use this qualifier here
  out float o;
  ~~~
")

# Test duplicate arguments
test("
void main(int x, int x) {
}
", "
<stdin>:1:22: error: There is already a symbol called \"x\" in the current scope
void main(int x, int x) {
                     ^
<stdin>:1:15: note: The previous definition of \"x\" is here
void main(int x, int x) {
              ^
")

# Test duplicate variables
test("
void main() {
  int x;
  int x;
}
", "
<stdin>:3:7: error: There is already a symbol called \"x\" in the current scope
  int x;
      ^
<stdin>:2:7: note: The previous definition of \"x\" is here
  int x;
      ^
")

# Test duplicate prototypes
test("
void main();
void main();
", "
<stdin>:2:6: error: There is already a symbol called \"main\" in the current scope
void main();
     ~~~~
<stdin>:1:6: note: The previous definition of \"main\" is here
void main();
     ~~~~
")

# Test extra prototype
test("
void main() {
}

void main();
", "
<stdin>:4:6: error: There is already a symbol called \"main\" in the current scope
void main();
     ~~~~
<stdin>:1:6: note: The previous definition of \"main\" is here
void main() {
     ~~~~
")

# Test duplicate functions
test("
void main() {}
void main() {}
", "
<stdin>:2:6: error: There is already a symbol called \"main\" in the current scope
void main() {}
     ~~~~
<stdin>:1:6: note: The previous definition of \"main\" is here
void main() {}
     ~~~~
")

# Test duplicate structs
test("
struct Foo {};
struct Foo {};
", "
<stdin>:2:8: error: There is already a symbol called \"Foo\" in the current scope
struct Foo {};
       ~~~
<stdin>:1:8: note: The previous definition of \"Foo\" is here
struct Foo {};
       ~~~
")

# Test duplicate fields
test("
struct Foo {
  int x;
  int x;
};
", "
<stdin>:3:7: error: There is already a symbol called \"x\" in the current scope
  int x;
      ^
<stdin>:2:7: note: The previous definition of \"x\" is here
  int x;
      ^
")

# These should not be duplicates
test("
void main();

void main() {
}
", "
void main();

void main() {
}
")

# These should not be duplicates
test("
int x;

void main(int x) {
}

void main() {
  int x = 0;
  {
    int x = 0;
    main(x);
  }
}
", "
int x;

void main(int x) {
}

void main() {
  int x = 0;
  {
    int x = 0;
    main(x);
  }
}
")

# Check C scoping rules
test("
void main() {
  const int x = 0;
  {
    const int x = -1, y = x;
    int a[x];
    int b[y];
  }
}
", "
<stdin>:5:11: error: Cannot declare an array with a size of \"-1\"
    int a[x];
          ^
<stdin>:6:11: error: Cannot declare an array with a size of \"-1\"
    int b[y];
          ^
")

# Check C scoping rules
test("
void main() {
  const int x = -1;
  {
    const int x = x;
    int y[x];
  }
}
", "
<stdin>:5:11: error: Cannot declare an array with a size of \"-1\"
    int y[x];
          ^
")

# Check C scoping rules
test("
void main() {
  const int x = -1;
  {
    int x[x];
  }
}
", "
<stdin>:4:11: error: Cannot declare an array with a size of \"-1\"
    int x[x];
          ^
")

# Check C scoping rules
test("
void main() {
  struct S {
    int x;
  };

  {
    S S = S(0); // This definition hides the type 'S' and declares the variable 'S'
    S.x = 1;
    S y; // The type 'S' is hidden and cannot be used
  }
}
", "
<stdin>:9:6: error: Expected SEMICOLON
    S y; // The type 'S' is hidden and cannot be used
     ^
<stdin>:9:7: error: There is no symbol called \"y\" in the current scope
    S y; // The type 'S' is hidden and cannot be used
      ^
")

# Nested struct definitions must be different types
test("
void main() {
  struct S { int x; };
  S a;
  a = a;
  {
    struct S { int x; };
    S b;
    b = b;
    a = b;
    b = a;
  }
}
", "
<stdin>:9:9: error: Cannot convert from type \"S\" to type \"S\"
    a = b;
        ^
<stdin>:10:9: error: Cannot convert from type \"S\" to type \"S\"
    b = a;
        ^
")

# Nested struct definitions are not allowed
test("
struct S {
  int x;
  struct T { int y; };
};
", "
<stdin>:3:3: error: This statement cannot be used inside a struct
  struct T { int y; };
  ~~~~~~~~~~~~~~~~~~~~
")

# Nested struct definitions are not allowed
test("
struct S {
  int x;
  struct T { int y; } z;
};
", "
<stdin>:3:3: error: This statement cannot be used inside a struct
  struct T { int y; } z;
  ~~~~~~~~~~~~~~~~~~~~~~
")

# Test weird struct-variable combo syntax
test("
void main() {
  struct S {
    int x;
  } y, z[2];

  S s;
  x++;
}
", "
<stdin>:7:3: error: There is no symbol called \"x\" in the current scope
  x++;
  ^
")

# Test weird struct-variable combo syntax
test("
void main() {
  struct S {
    int x;
  } y, z[2];

  y.x = z[0].x + z[2].x > 0;
}
", "
<stdin>:6:20: error: Index \"2\" is out of bounds for type \"S[2]\"
  y.x = z[0].x + z[2].x > 0;
                   ^
<stdin>:6:9: error: Cannot convert from type \"bool\" to type \"int\"
  y.x = z[0].x + z[2].x > 0;
        ~~~~~~~~~~~~~~~~~~~
")

# Test invalid array syntax
test("
void main(int[] x) {
}
", "
<stdin>:1:14: error: Expected IDENTIFIER but found LEFT_BRACKET
void main(int[] x) {
             ^
")

# Test invalid array syntax
test("
void main(int[2] x) {
}
", "
<stdin>:1:14: error: Expected IDENTIFIER but found LEFT_BRACKET
void main(int[2] x) {
             ^
")

# Test invalid array syntax
test("
void main() {
  int x[2] = int[](1, 2);
}
", "
<stdin>:2:18: error: Unexpected RIGHT_BRACKET
  int x[2] = int[](1, 2);
                 ^
<stdin>:2:12: error: Cannot assign to array type \"int[2]\"
  int x[2] = int[](1, 2);
           ^
")

# Test invalid array syntax
test("
void main() {
  int x[2] = int[2](1, 2);
}
", "
<stdin>:2:14: error: Unexpected type \"int\"
  int x[2] = int[2](1, 2);
             ~~~
<stdin>:2:12: error: Cannot assign to array type \"int[2]\"
  int x[2] = int[2](1, 2);
           ^
")

# Test invalid array syntax
test("
void main() {
  int x[2];
  x = int[](1, 2);
}
", "
<stdin>:3:11: error: Unexpected RIGHT_BRACKET
  x = int[](1, 2);
          ^
<stdin>:3:5: error: Cannot assign to array type \"int[2]\"
  x = int[](1, 2);
    ^
")

# Test invalid array syntax
test("
void main() {
  int x[2];
  x = int[2](1, 2);
}
", "
<stdin>:3:7: error: Unexpected type \"int\"
  x = int[2](1, 2);
      ~~~
<stdin>:3:5: error: Cannot assign to array type \"int[2]\"
  x = int[2](1, 2);
    ^
")

# Test invalid array syntax
test("
void main() {
  int x[2][2];
}
", "
<stdin>:2:11: error: Multidimensional arrays are not a part of the language
  int x[2][2];
          ~~~
")

# Test invalid array syntax
test("
void main(int x[], int y[]) {
}
", "
<stdin>:1:16: error: All array sizes must be specified
void main(int x[], int y[]) {
               ~~
<stdin>:1:25: error: All array sizes must be specified
void main(int x[], int y[]) {
                        ~~
")

# Test a special case for a void argument list
test("
void foo(void) {
}

void main() {
  foo();
}
", "
void foo() {
}

void main() {
  foo();
}
")

# Check that duplicate symbol errors don't halt compilation
test("
void main(int x, float x) {
  x = false;
  int y = 0;
  float y = 0;
  x = !y;
}
", "
<stdin>:1:24: error: There is already a symbol called \"x\" in the current scope
void main(int x, float x) {
                       ^
<stdin>:1:15: note: The previous definition of \"x\" is here
void main(int x, float x) {
              ^
<stdin>:4:9: error: There is already a symbol called \"y\" in the current scope
  float y = 0;
        ^
<stdin>:3:7: note: The previous definition of \"y\" is here
  int y = 0;
      ^
<stdin>:2:7: error: Cannot convert from type \"bool\" to type \"int\"
  x = false;
      ~~~~~
<stdin>:4:13: error: Cannot convert from type \"int\" to type \"float\"
  float y = 0;
            ^
<stdin>:5:7: error: No unary operator \"!\" for type \"int\"
  x = !y;
      ^
")

# Check that missing symbol errors don't halt compilation
test("
void main() {
  foo = bar();
  bar = foo();
  return 0;
}
", "
<stdin>:2:3: error: There is no symbol called \"foo\" in the current scope
  foo = bar();
  ~~~
<stdin>:2:9: error: There is no symbol called \"bar\" in the current scope
  foo = bar();
        ~~~
<stdin>:3:3: error: There is no symbol called \"bar\" in the current scope
  bar = foo();
  ~~~
<stdin>:3:9: error: There is no symbol called \"foo\" in the current scope
  bar = foo();
        ~~~
<stdin>:4:10: error: Cannot convert from type \"int\" to type \"void\"
  return 0;
         ^
")

# Recover if a semicolon is omitted in certain places
test("
int main() {
  return 0
  if (0) {}
  struct Foo {}
  if (0) {}
}
", "
<stdin>:2:11: error: Expected SEMICOLON
  return 0
          ^
<stdin>:4:16: error: Expected SEMICOLON
  struct Foo {}
               ^
<stdin>:3:7: error: Cannot convert from type \"int\" to type \"bool\"
  if (0) {}
      ^
<stdin>:5:7: error: Cannot convert from type \"int\" to type \"bool\"
  if (0) {}
      ^
")

# Check #include without file system access
test("
#include \"C:\\\\foo.glslx\"
", "
<stdin>:1:10: error: Cannot include files without access to a file system
#include \"C:\\\\foo.glslx\"
         ~~~~~~~~~~~~~~~
")

# Check #include with a bad file name
test("
#include \"C:\\\\foo.glslx\"
", "
<stdin>:1:10: error: Cannot read the file \"C:\\\\foo.glslx\"
#include \"C:\\\\foo.glslx\"
         ~~~~~~~~~~~~~~~
").fileAccess((path, relativeTo) => {
  assert(path == "C:\\foo.glslx")
  assert(relativeTo == "<stdin>")
  return null
})

# Check basic #include usage
test("
#include \"C:\\\\foo.glslx\"

vec2 main() {
  return foo;
}
", "
<stdin>:4:10: error: Cannot convert from type \"int\" to type \"vec2\"
  return foo;
         ~~~
").fileAccess((path, relativeTo) => {
  assert(path == "C:\\foo.glslx")
  assert(relativeTo == "<stdin>")
  return Source.new(path, "int foo;")
})

# Check errors in #include
test("
vec2 foo;
#include \"C:\\\\foo.glslx\"
", "
C:\\foo-alternate-name.glslx:1:5: error: There is already a symbol called \"foo\" in the current scope
int foo;
    ~~~
<stdin>:1:6: note: The previous definition of \"foo\" is here
vec2 foo;
     ~~~
").fileAccess((path, relativeTo) => {
  assert(path == "C:\\foo.glslx")
  assert(relativeTo == "<stdin>")
  return Source.new("C:\\foo-alternate-name.glslx", "int foo;")
})

# Check nested #include usage
test("
#include \"C:\\\\foo.glslx\"

vec2 main() {
  return foo;
}
", "
<stdin>:4:10: error: Cannot convert from type \"int\" to type \"vec2\"
  return foo;
         ~~~
").fileAccess((path, relativeTo) => {
  if path == "C:\\foo.glslx" {
    assert(relativeTo == "<stdin>")
    return Source.new(path, "#include \"C:\\\\bar.glslx\"")
  }

  assert(relativeTo == "C:\\foo.glslx")
  assert(path == "C:\\bar.glslx")
  return Source.new(path, "int foo;")
})

# Check errors in nested #include
test("
vec2 foo;
#include \"C:\\\\foo.glslx\"
", "
C:\\bar.glslx:1:5: error: There is already a symbol called \"foo\" in the current scope
int foo;
    ~~~
<stdin>:1:6: note: The previous definition of \"foo\" is here
vec2 foo;
     ~~~
").fileAccess((path, relativeTo) => {
  if path == "C:\\foo.glslx" {
    assert(relativeTo == "<stdin>")
    return Source.new(path, "#include \"C:\\\\bar.glslx\"")
  }

  assert(relativeTo == "C:\\foo.glslx")
  assert(path == "C:\\bar.glslx")
  return Source.new(path, "int foo;")
})

# Check that #include works
test("
#include \"C:\\\\foo.glslx\"

void main() {
  _color = color;
}
", "
attribute vec4 color;
varying vec4 _color;

void main() {
  _color = color;
}
").fileAccess((path, relativeTo) => {
  assert(path == "C:\\foo.glslx")
  assert(relativeTo == "<stdin>")
  return Source.new(path, "
attribute vec4 color;
varying vec4 _color;
")
})

# Don't include the same file multiple times
test("
#include \"C:\\\\foo.glslx\"
#include \"C:\\\\foo.glslx\"

void main() {
  _color = color;
}
", "
attribute vec4 color;
varying vec4 _color;

void main() {
  _color = color;
}
").fileAccess((path, relativeTo) => {
  assert(path == "C:\\foo.glslx")
  assert(relativeTo == "<stdin>")
  return Source.new(path, "
attribute vec4 color;
varying vec4 _color;
")
})

# Don't allow syntax that spans files
test("
#include \"C:\\\\foo.glslx\"
) {
}
", "
C:\\foo.glslx:1:11: error: Unexpected END_OF_FILE
void main(
          ^
").fileAccess((path, relativeTo) => {
  assert(path == "C:\\foo.glslx")
  assert(relativeTo == "<stdin>")
  return Source.new(path, "void main(")
})

  }
}
