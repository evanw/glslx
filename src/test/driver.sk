namespace GLSLX.Tests {
  class CompilerTest : Unit.Test {
    var _input string
    var _expected string
    var _options = CompilerOptions.new
    var _outputFormat Box<OutputFormat> = null

    over run {
      rename(compactWhitespace(_input))
      var log = Log.new
      var result = Compiler.compile(log, [Source.new("<stdin>", _input)], _options)
      var output = log.toString

      if result != null {
        if _outputFormat != null {
          output = result.output(_outputFormat.value)
        }

        else if !result.shaders.isEmpty {
          output = "\n".join(result.shaders.map<string>(source => {
            if result.shaders.count != 1 {
              return "[\(source.name)]\n\(source.contents)"
            }
            return source.contents
          }))
        }
      }

      expectString(_expected, trimNewlines(output))
    }

    def reset CompilerTest {
      _options.compactSyntaxTree = false
      _options.removeWhitespace = false
      _options.renameSymbols = .NONE
      _options.trimSymbols = false
      _options.ignoredSymbols = []
      return self
    }

    def compactSyntaxTree CompilerTest {
      _options.compactSyntaxTree = true
      return self
    }

    def removeWhitespace CompilerTest {
      _options.removeWhitespace = true
      return self
    }

    def renameAll CompilerTest {
      _options.renameSymbols = .ALL
      return self
    }

    def trimSymbols CompilerTest {
      _options.trimSymbols = true
      return self
    }

    def ignoredSymbols(ignoredSymbols List<string>) CompilerTest {
      _options.ignoredSymbols = ignoredSymbols
      return self
    }

    def fileAccess(callback fn(string, string) Source) CompilerTest {
      _options.fileAccess = callback
      return self
    }

    def generateOutput(format OutputFormat) CompilerTest {
      _outputFormat = Box<OutputFormat>.new(format)
      return self
    }
  }

  class IDETest : Unit.Test {
    var _input string
    var _expected string
    var _options = CompilerOptions.new
    var _callback fn(IDETest, fn(string, string))
    var _source Source = null
    var _result Compiler.TypeCheckResult = null

    over run {
      rename(compactWhitespace(_input))
      var log = Log.new
      _source = Source.new("<stdin>", _input)
      _result = Compiler.typeCheck(log, [_source], _options)
      expectString(_expected, trimNewlines(log.toString))
      _callback(self, (a, b) => expectString(a, b))
    }

    def tooltipQuery(line int, column int) string {
      var query = IDE.SymbolQuery.new(_source, _source.lineColumnToIndex(line, column))
      query.run(_result.global)
      var tooltip = query.generateTooltip
      return tooltip != null ? tooltip.code : ""
    }
  }

  class FormatterTest : Unit.Test {
    var _input string
    var _expected string
    var _indent = "  "
    var _newline = "\n"
    var _trailingNewline = Formatter.TrailingNewline.PRESERVE

    over run {
      var output = Formatter.format(_input, _indent, _newline, _trailingNewline)
      expectString(_expected, output)
    }

    def indent(value string) FormatterTest {
      _indent = value
      return self
    }

    def newline(value string) FormatterTest {
      _newline = value
      return self
    }

    def trailingNewline(value Formatter.TrailingNewline) FormatterTest {
      _trailingNewline = value
      return self
    }
  }

  def trimNewlines(text string) string {
    var length = text.count
    var start = 0
    var end = length
    while start < length && text[start] == '\n' {
      start++
    }
    while start < end && text[end - 1] == '\n' {
      end--
    }
    return text.slice(start, end)
  }

  def compactWhitespace(text string) string {
    var wasSpace = false
    var result = ""
    for i in 0..text.count {
      var c = text[i]
      if c != '\n' && c != ' ' && c != '\t' {
        result += text.get(i)
        wasSpace = false
      } else if !wasSpace {
        result += " "
        wasSpace = true
      }
    }
    return result
  }

  def test(input string, expected string) CompilerTest {
    return CompilerTest.new(trimNewlines(input), trimNewlines(expected)).reset
  }

  def testIDE(input string, expected string, callback fn(IDETest, fn(string, string))) IDETest {
    return IDETest.new(trimNewlines(input), trimNewlines(expected), callback)
  }

  def testFormatter(input string, expected string) FormatterTest {
    return FormatterTest.new(input, expected)
  }

  @entry
  def main int {
    dynamic.require("source-map-support").install()
    dynamic.Error.stackTraceLimit = Math.INFINITY

    testEmitter
    testFolder
    testMinifier
    testParser
    testResolver
    testRenamer
    testRewriter
    testTooltips
    testFormatter

    var report = Unit.TerminalReport.new
    Unit.Test.runAll(report)
    return report.failedCount
  }
}
