namespace GLSLX.Tests {
  def testEmitter {

# Test symbol modifier pass-through
test("
void main(in int i, out int o, inout int io, const int ci) {
  lowp float l;
  mediump float m;
  highp float h;
  const float cf = 0.0;
}
", "
void main(in int i, out int o, inout int io, const int ci) {
  lowp float l;
  mediump float m;
  highp float h;
  const float cf = 0.0;
}
")

# Test array type pass-through
test("
void main() {
  const int N = 1 + 2;
  int x[2], y[N];
  x[0] = y[1];
}
", "
void main() {
  const int N = 1 + 2;
  int x[2], y[N];
  x[0] = y[1];
}
")

# Test weird struct-variable combo syntax
test("
void main() {
  struct S {
    int x;
  } y, z[2];
}
", "
void main() {
  struct S {
    int x;
  } y, z[2];
}
")

# Test unary assignment operator pass-through
test("
void main() {
  int x = 0;
  float y = 0.0;

  x++;
  x--;
  ++x;
  --x;

  y++;
  y--;
  ++y;
  --y;
}
", "
void main() {
  int x = 0;
  float y = 0.0;
  x++;
  x--;
  ++x;
  --x;
  y++;
  y--;
  ++y;
  --y;
}
")

# Test JSON generation
test("
uniform float global;
varying float internal;

export void foo() { float local = global; gl_FragColor = vec4(local + internal); }
export void bar() { float local = global; gl_FragColor = vec4(local + internal); }
", "
{
  \"shaders\": [
    {
      \"name\": \"foo\",
      \"contents\": \"uniform float global;varying float internal;void main(){float local=global;gl_FragColor=vec4(local+internal);}\",
      \"attributes\": {},
      \"uniforms\": {
        \"global\": \"float\"
      }
    },
    {
      \"name\": \"bar\",
      \"contents\": \"uniform float global;varying float internal;void main(){float local=global;gl_FragColor=vec4(local+internal);}\",
      \"attributes\": {},
      \"uniforms\": {
        \"global\": \"float\"
      }
    }
  ],
  \"renaming\": {
    \"global\": \"global\"
  }
}
").removeWhitespace.trimSymbols.generateOutput(.JSON)

# Test JSON generation with renaming
test("
uniform float global;
varying float internal;

export void foo() { float local = global; gl_FragColor = vec4(local + internal); }
export void bar() { float local = global; gl_FragColor = vec4(local + internal); }
", "
{
  \"shaders\": [
    {
      \"name\": \"foo\",
      \"contents\": \"uniform float a;varying float b;void main(){float c=a;gl_FragColor=vec4(c+b);}\",
      \"attributes\": {},
      \"uniforms\": {
        \"global\": \"float\"
      }
    },
    {
      \"name\": \"bar\",
      \"contents\": \"uniform float a;varying float b;void main(){float c=a;gl_FragColor=vec4(c+b);}\",
      \"attributes\": {},
      \"uniforms\": {
        \"global\": \"float\"
      }
    }
  ],
  \"renaming\": {
    \"global\": \"a\"
  }
}
").removeWhitespace.trimSymbols.renameAll.generateOutput(.JSON)

# Test C++ code generation
test("
uniform float global;
varying float internal;

export void foo() { float local = global; gl_FragColor = vec4(local + internal); }
export void bar() { float local = global; gl_FragColor = vec4(local + internal); }
", "
#ifndef GLSLX_STRINGS_H
#define GLSLX_STRINGS_H

static const char *GLSLX_SOURCE_FOO = \"uniform float global;varying float internal;void main(){float local=global;gl_FragColor=vec4(local+internal);}\";
static const char *GLSLX_SOURCE_BAR = \"uniform float global;varying float internal;void main(){float local=global;gl_FragColor=vec4(local+internal);}\";

static const char *GLSLX_NAME_GLOBAL = \"global\";

#endif
").removeWhitespace.trimSymbols.generateOutput(.CPP)

# Test C++ code generation with renaming
test("
uniform float global;
varying float internal;

export void foo() { float local = global; gl_FragColor = vec4(local + internal); }
export void bar() { float local = global; gl_FragColor = vec4(local + internal); }
", "
#ifndef GLSLX_STRINGS_H
#define GLSLX_STRINGS_H

static const char *GLSLX_SOURCE_FOO = \"uniform float a;varying float b;void main(){float c=a;gl_FragColor=vec4(c+b);}\";
static const char *GLSLX_SOURCE_BAR = \"uniform float a;varying float b;void main(){float c=a;gl_FragColor=vec4(c+b);}\";

static const char *GLSLX_NAME_GLOBAL = \"a\";

#endif
").removeWhitespace.trimSymbols.renameAll.generateOutput(.CPP)

# Test C++ code generation
test("
uniform float global;
varying float internal;

export void foo() { float local = global; gl_FragColor = vec4(local + internal); }
export void bar() { float local = global; gl_FragColor = vec4(local + internal); }
", "
const GLSLX_SOURCE_FOO = \"uniform float global;varying float internal;void main(){float local=global;gl_FragColor=vec4(local+internal);}\"
const GLSLX_SOURCE_BAR = \"uniform float global;varying float internal;void main(){float local=global;gl_FragColor=vec4(local+internal);}\"

const GLSLX_NAME_GLOBAL = \"global\"
").removeWhitespace.trimSymbols.generateOutput(.SKEW)

# Test C++ code generation with renaming
test("
uniform float global;
varying float internal;

export void foo() { float local = global; gl_FragColor = vec4(local + internal); }
export void bar() { float local = global; gl_FragColor = vec4(local + internal); }
", "
const GLSLX_SOURCE_FOO = \"uniform float a;varying float b;void main(){float c=a;gl_FragColor=vec4(c+b);}\"
const GLSLX_SOURCE_BAR = \"uniform float a;varying float b;void main(){float c=a;gl_FragColor=vec4(c+b);}\"

const GLSLX_NAME_GLOBAL = \"a\"
").removeWhitespace.trimSymbols.renameAll.generateOutput(.SKEW)

  }
}
