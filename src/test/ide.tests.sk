namespace GLSLX.Tests {
  def testTooltips {

# Basic global symbols
testIDE("
int globalFunction ( int x ) { return x; }
int globalVariable = 0;
struct GlobalStruct { int x; };
", "
", (ide, expect) => {
  expect("struct int;", ide.tooltipQuery(0, 0))
  expect("struct int;", ide.tooltipQuery(0, 3))
  expect("int globalFunction(int x);", ide.tooltipQuery(0, 4))
  expect("int globalFunction(int x);", ide.tooltipQuery(0, 18))
  expect("", ide.tooltipQuery(0, 19))
  expect("", ide.tooltipQuery(0, 20))
  expect("struct int;", ide.tooltipQuery(0, 21))
  expect("struct int;", ide.tooltipQuery(0, 24))
  expect("int x;", ide.tooltipQuery(0, 25))
  expect("int x;", ide.tooltipQuery(0, 26))
  expect("", ide.tooltipQuery(0, 27))
  expect("", ide.tooltipQuery(0, 37))
  expect("int x;", ide.tooltipQuery(0, 38))
  expect("int x;", ide.tooltipQuery(0, 39))
  expect("", ide.tooltipQuery(0, 40))

  expect("struct int;", ide.tooltipQuery(1, 0))
  expect("struct int;", ide.tooltipQuery(1, 3))
  expect("int globalVariable;", ide.tooltipQuery(1, 4))
  expect("int globalVariable;", ide.tooltipQuery(1, 18))
  expect("", ide.tooltipQuery(1, 19))

  expect("", ide.tooltipQuery(2, 6))
  expect("struct GlobalStruct {\n  int x;\n};", ide.tooltipQuery(2, 7))
  expect("struct GlobalStruct {\n  int x;\n};", ide.tooltipQuery(2, 19))
  expect("", ide.tooltipQuery(2, 20))
  expect("", ide.tooltipQuery(2, 21))
  expect("struct int;", ide.tooltipQuery(2, 22))
  expect("struct int;", ide.tooltipQuery(2, 25))
  expect("int x;", ide.tooltipQuery(2, 26))
  expect("int x;", ide.tooltipQuery(2, 27))
  expect("", ide.tooltipQuery(2, 28))

  expect("", ide.tooltipQuery(3, 0))
})

# Check constant expressions
testIDE("
struct Foo { int i; vec2 v2; };
const float foo = (vec2(2, 3) / 2.0).y;
const vec2 bar = vec2(1, 2) + vec2(3, 4);
const Foo baz = Foo(7 / 3, 0.25 - vec2(2, 3) / 2.0);
", "
", (ide, expect) => {
  expect("const float foo = 1.5;", ide.tooltipQuery(1, 12))
  expect("const vec2 bar = vec2(4.0, 6.0);", ide.tooltipQuery(2, 11))
  expect("const Foo baz = Foo(2, vec2(-0.75, -1.25));", ide.tooltipQuery(3, 10))
})

# Check arrays
testIDE("
const int N = 2;
int x[N];
", "
", (ide, expect) => {
  expect("struct int;", ide.tooltipQuery(1, 0))
  expect("struct int;", ide.tooltipQuery(1, 3))
  expect("int x[2];", ide.tooltipQuery(1, 4))
  expect("int x[2];", ide.tooltipQuery(1, 5))
  expect("const int N = 2;", ide.tooltipQuery(1, 6))
  expect("const int N = 2;", ide.tooltipQuery(1, 7))
  expect("", ide.tooltipQuery(1, 8))
})

# Check swizzles
testIDE("
ivec3 x = ivec2(1, 2).sst;
", "
", (ide, expect) => {
  expect("ivec3 sst;", ide.tooltipQuery(0, 22))
})

# Check tooltips in the presence of errors
testIDE("
void foo() {
  bar()
  baz()
  int x = 0
  foo()
}
", "
<stdin>:2:3: error: There is no symbol called \"bar\" in the current scope
  bar()
  ~~~
<stdin>:2:8: error: Expected SEMICOLON
  bar()
       ^
<stdin>:3:3: error: There is no symbol called \"baz\" in the current scope
  baz()
  ~~~
<stdin>:3:8: error: Expected SEMICOLON
  baz()
       ^
<stdin>:4:12: error: Expected SEMICOLON
  int x = 0
           ^
<stdin>:5:8: error: Expected SEMICOLON
  foo()
       ^
", (ide, expect) => {
  expect("void foo();", ide.tooltipQuery(0, 5))
  expect("", ide.tooltipQuery(1, 2))
  expect("", ide.tooltipQuery(2, 2))
  expect("int x;", ide.tooltipQuery(3, 6))
  expect("void foo();", ide.tooltipQuery(4, 2))
})

# Check built-ins
testIDE("
void main() {
  gl_Position = vec4(0);
}
", "
", (ide, expect) => {
  expect("highp vec4 gl_Position;", ide.tooltipQuery(1, 2))
})

# Check unused symbol detection for local symbols
testIDE("
float foo() {
  float x = 1.0;
  float y = 2.0;
  return x;
}
", "
", (ide, expect) => {
  expect("x: used", ide.unusedStatusQuery("x"))
  expect("y: unused", ide.unusedStatusQuery("y"))
})

# Check unused symbol detection for global symbols
testIDE("
float x = 1.0;
float y = 2.0;
float foo() {
  return x;
}
", "
", (ide, expect) => {
  expect("x: used", ide.unusedStatusQuery("x"))
  expect("y: unused", ide.unusedStatusQuery("y"))
})

# Check unused symbol detection in dead branches
testIDE("
float foo() {
  float x = 1.0;
  float y = 2.0;
  if (false) return x;
  return 0.0;
}
", "
", (ide, expect) => {
  expect("x: used", ide.unusedStatusQuery("x"))
  expect("y: unused", ide.unusedStatusQuery("y"))
})

# Check unused symbol detection for functions
testIDE("
void a() {}
void b() {}
void c() {}
void d() { c(); }
void foo() {
  b();
  d();
}
", "
", (ide, expect) => {
  expect("a: unused", ide.unusedStatusQuery("a"))
  expect("b: used", ide.unusedStatusQuery("b"))
  expect("c: used", ide.unusedStatusQuery("c"))
  expect("d: used", ide.unusedStatusQuery("d"))
})

# Check unused symbol detection for local constants
testIDE("
float foo() {
  const float x = 1.0;
  const float y = 2.0;
  return x;
}
", "
", (ide, expect) => {
  expect("x: used", ide.unusedStatusQuery("x"))
  expect("y: unused", ide.unusedStatusQuery("y"))
})

# Check unused symbol detection for global constants
testIDE("
const float x = 1.0;
const float y = 2.0;
float foo() {
  return x;
}
", "
", (ide, expect) => {
  expect("x: used", ide.unusedStatusQuery("x"))
  expect("y: unused", ide.unusedStatusQuery("y"))
})

  }
}
